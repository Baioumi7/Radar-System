
Radar_System_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000031b0  00003244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800068  00800068  0000324c  2**0
                  ALLOC
  3 .stab         000030f0  00000000  00000000  0000324c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017b9  00000000  00000000  0000633c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007af5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009e29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000af2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000beac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c02c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c2ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cb7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6d 0d 	jmp	0x1ada	; 0x1ada <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 a0 0d 	jmp	0x1b40	; 0x1b40 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 f2 10 	jmp	0x21e4	; 0x21e4 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 bf 10 	jmp	0x217e	; 0x217e <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__vector_13>
      38:	0c 94 bd 14 	jmp	0x297a	; 0x297a <__vector_14>
      3c:	0c 94 ad 14 	jmp	0x295a	; 0x295a <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 38       	cpi	r26, 0x8A	; 138
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e0 eb       	ldi	r30, 0xB0	; 176
      78:	f1 e3       	ldi	r31, 0x31	; 49
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 11 17 	call	0x2e22	; 0x2e22 <main>
      8a:	0c 94 d6 18 	jmp	0x31ac	; 0x31ac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9f 18 	jmp	0x313e	; 0x313e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ab 18 	jmp	0x3156	; 0x3156 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ab 18 	jmp	0x3156	; 0x3156 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9f 18 	jmp	0x313e	; 0x313e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ab 18 	jmp	0x3156	; 0x3156 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ab 18 	jmp	0x3156	; 0x3156 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ab 18 	jmp	0x3156	; 0x3156 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 af 18 	jmp	0x315e	; 0x315e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_u8SetPinDirection>:
#include "DIO_register.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	2a 97       	sbiw	r28, 0x0a	; 10
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	8a 83       	std	Y+2, r24	; 0x02
     cb4:	6b 83       	std	Y+3, r22	; 0x03
     cb6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     cb8:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	88 30       	cpi	r24, 0x08	; 8
     cbe:	08 f0       	brcs	.+2      	; 0xcc2 <DIO_u8SetPinDirection+0x24>
     cc0:	b9 c1       	rjmp	.+882    	; 0x1034 <DIO_u8SetPinDirection+0x396>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
     cc2:	8c 81       	ldd	r24, Y+4	; 0x04
     cc4:	88 23       	and	r24, r24
     cc6:	09 f0       	breq	.+2      	; 0xcca <DIO_u8SetPinDirection+0x2c>
     cc8:	77 c0       	rjmp	.+238    	; 0xdb8 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	3a 87       	std	Y+10, r19	; 0x0a
     cd2:	29 87       	std	Y+9, r18	; 0x09
     cd4:	89 85       	ldd	r24, Y+9	; 0x09
     cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	91 05       	cpc	r25, r1
     cdc:	59 f1       	breq	.+86     	; 0xd34 <DIO_u8SetPinDirection+0x96>
     cde:	29 85       	ldd	r18, Y+9	; 0x09
     ce0:	3a 85       	ldd	r19, Y+10	; 0x0a
     ce2:	22 30       	cpi	r18, 0x02	; 2
     ce4:	31 05       	cpc	r19, r1
     ce6:	2c f4       	brge	.+10     	; 0xcf2 <DIO_u8SetPinDirection+0x54>
     ce8:	89 85       	ldd	r24, Y+9	; 0x09
     cea:	9a 85       	ldd	r25, Y+10	; 0x0a
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	69 f0       	breq	.+26     	; 0xd0a <DIO_u8SetPinDirection+0x6c>
     cf0:	60 c0       	rjmp	.+192    	; 0xdb2 <DIO_u8SetPinDirection+0x114>
     cf2:	29 85       	ldd	r18, Y+9	; 0x09
     cf4:	3a 85       	ldd	r19, Y+10	; 0x0a
     cf6:	22 30       	cpi	r18, 0x02	; 2
     cf8:	31 05       	cpc	r19, r1
     cfa:	89 f1       	breq	.+98     	; 0xd5e <DIO_u8SetPinDirection+0xc0>
     cfc:	89 85       	ldd	r24, Y+9	; 0x09
     cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     d00:	83 30       	cpi	r24, 0x03	; 3
     d02:	91 05       	cpc	r25, r1
     d04:	09 f4       	brne	.+2      	; 0xd08 <DIO_u8SetPinDirection+0x6a>
     d06:	40 c0       	rjmp	.+128    	; 0xd88 <DIO_u8SetPinDirection+0xea>
     d08:	54 c0       	rjmp	.+168    	; 0xdb2 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
     d0a:	aa e3       	ldi	r26, 0x3A	; 58
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	ea e3       	ldi	r30, 0x3A	; 58
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	48 2f       	mov	r20, r24
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	02 2e       	mov	r0, r18
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <DIO_u8SetPinDirection+0x8a>
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	0a 94       	dec	r0
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <DIO_u8SetPinDirection+0x86>
     d2c:	80 95       	com	r24
     d2e:	84 23       	and	r24, r20
     d30:	8c 93       	st	X, r24
     d32:	82 c1       	rjmp	.+772    	; 0x1038 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
     d34:	a7 e3       	ldi	r26, 0x37	; 55
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e7 e3       	ldi	r30, 0x37	; 55
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	48 2f       	mov	r20, r24
     d40:	8b 81       	ldd	r24, Y+3	; 0x03
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	02 2e       	mov	r0, r18
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <DIO_u8SetPinDirection+0xb4>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	0a 94       	dec	r0
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <DIO_u8SetPinDirection+0xb0>
     d56:	80 95       	com	r24
     d58:	84 23       	and	r24, r20
     d5a:	8c 93       	st	X, r24
     d5c:	6d c1       	rjmp	.+730    	; 0x1038 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
     d5e:	a4 e3       	ldi	r26, 0x34	; 52
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e4 e3       	ldi	r30, 0x34	; 52
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	48 2f       	mov	r20, r24
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 2e       	mov	r0, r18
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_u8SetPinDirection+0xde>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	0a 94       	dec	r0
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_u8SetPinDirection+0xda>
     d80:	80 95       	com	r24
     d82:	84 23       	and	r24, r20
     d84:	8c 93       	st	X, r24
     d86:	58 c1       	rjmp	.+688    	; 0x1038 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
     d88:	a1 e3       	ldi	r26, 0x31	; 49
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	e1 e3       	ldi	r30, 0x31	; 49
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	48 2f       	mov	r20, r24
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 2e       	mov	r0, r18
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <DIO_u8SetPinDirection+0x108>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	0a 94       	dec	r0
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <DIO_u8SetPinDirection+0x104>
     daa:	80 95       	com	r24
     dac:	84 23       	and	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	43 c1       	rjmp	.+646    	; 0x1038 <DIO_u8SetPinDirection+0x39a>
			default: Local_u8ErrorState=1; break;
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	89 83       	std	Y+1, r24	; 0x01
     db6:	40 c1       	rjmp	.+640    	; 0x1038 <DIO_u8SetPinDirection+0x39a>
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
     db8:	8c 81       	ldd	r24, Y+4	; 0x04
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <DIO_u8SetPinDirection+0x122>
     dbe:	72 c0       	rjmp	.+228    	; 0xea4 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	38 87       	std	Y+8, r19	; 0x08
     dc8:	2f 83       	std	Y+7, r18	; 0x07
     dca:	8f 81       	ldd	r24, Y+7	; 0x07
     dcc:	98 85       	ldd	r25, Y+8	; 0x08
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	91 05       	cpc	r25, r1
     dd2:	49 f1       	breq	.+82     	; 0xe26 <DIO_u8SetPinDirection+0x188>
     dd4:	2f 81       	ldd	r18, Y+7	; 0x07
     dd6:	38 85       	ldd	r19, Y+8	; 0x08
     dd8:	22 30       	cpi	r18, 0x02	; 2
     dda:	31 05       	cpc	r19, r1
     ddc:	2c f4       	brge	.+10     	; 0xde8 <DIO_u8SetPinDirection+0x14a>
     dde:	8f 81       	ldd	r24, Y+7	; 0x07
     de0:	98 85       	ldd	r25, Y+8	; 0x08
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	61 f0       	breq	.+24     	; 0xdfe <DIO_u8SetPinDirection+0x160>
     de6:	5b c0       	rjmp	.+182    	; 0xe9e <DIO_u8SetPinDirection+0x200>
     de8:	2f 81       	ldd	r18, Y+7	; 0x07
     dea:	38 85       	ldd	r19, Y+8	; 0x08
     dec:	22 30       	cpi	r18, 0x02	; 2
     dee:	31 05       	cpc	r19, r1
     df0:	71 f1       	breq	.+92     	; 0xe4e <DIO_u8SetPinDirection+0x1b0>
     df2:	8f 81       	ldd	r24, Y+7	; 0x07
     df4:	98 85       	ldd	r25, Y+8	; 0x08
     df6:	83 30       	cpi	r24, 0x03	; 3
     df8:	91 05       	cpc	r25, r1
     dfa:	e9 f1       	breq	.+122    	; 0xe76 <DIO_u8SetPinDirection+0x1d8>
     dfc:	50 c0       	rjmp	.+160    	; 0xe9e <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
     dfe:	aa e3       	ldi	r26, 0x3A	; 58
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	ea e3       	ldi	r30, 0x3A	; 58
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	48 2f       	mov	r20, r24
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 2e       	mov	r0, r18
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <DIO_u8SetPinDirection+0x17e>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	0a 94       	dec	r0
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <DIO_u8SetPinDirection+0x17a>
     e20:	84 2b       	or	r24, r20
     e22:	8c 93       	st	X, r24
     e24:	09 c1       	rjmp	.+530    	; 0x1038 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
     e26:	a7 e3       	ldi	r26, 0x37	; 55
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e7 e3       	ldi	r30, 0x37	; 55
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	48 2f       	mov	r20, r24
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 2e       	mov	r0, r18
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <DIO_u8SetPinDirection+0x1a6>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	0a 94       	dec	r0
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <DIO_u8SetPinDirection+0x1a2>
     e48:	84 2b       	or	r24, r20
     e4a:	8c 93       	st	X, r24
     e4c:	f5 c0       	rjmp	.+490    	; 0x1038 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
     e4e:	a4 e3       	ldi	r26, 0x34	; 52
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e4 e3       	ldi	r30, 0x34	; 52
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	48 2f       	mov	r20, r24
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	02 2e       	mov	r0, r18
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <DIO_u8SetPinDirection+0x1ce>
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	0a 94       	dec	r0
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <DIO_u8SetPinDirection+0x1ca>
     e70:	84 2b       	or	r24, r20
     e72:	8c 93       	st	X, r24
     e74:	e1 c0       	rjmp	.+450    	; 0x1038 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
     e76:	a1 e3       	ldi	r26, 0x31	; 49
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e1 e3       	ldi	r30, 0x31	; 49
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 2e       	mov	r0, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_u8SetPinDirection+0x1f6>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_u8SetPinDirection+0x1f2>
     e98:	84 2b       	or	r24, r20
     e9a:	8c 93       	st	X, r24
     e9c:	cd c0       	rjmp	.+410    	; 0x1038 <DIO_u8SetPinDirection+0x39a>
			default: Local_u8ErrorState=1; break;
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	ca c0       	rjmp	.+404    	; 0x1038 <DIO_u8SetPinDirection+0x39a>
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_INPULLUP)
     ea4:	8c 81       	ldd	r24, Y+4	; 0x04
     ea6:	82 30       	cpi	r24, 0x02	; 2
     ea8:	09 f0       	breq	.+2      	; 0xeac <DIO_u8SetPinDirection+0x20e>
     eaa:	c1 c0       	rjmp	.+386    	; 0x102e <DIO_u8SetPinDirection+0x390>
			{
				switch(Copy_u8Port)
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	3e 83       	std	Y+6, r19	; 0x06
     eb4:	2d 83       	std	Y+5, r18	; 0x05
     eb6:	8d 81       	ldd	r24, Y+5	; 0x05
     eb8:	9e 81       	ldd	r25, Y+6	; 0x06
     eba:	81 30       	cpi	r24, 0x01	; 1
     ebc:	91 05       	cpc	r25, r1
     ebe:	09 f4       	brne	.+2      	; 0xec2 <DIO_u8SetPinDirection+0x224>
     ec0:	3e c0       	rjmp	.+124    	; 0xf3e <DIO_u8SetPinDirection+0x2a0>
     ec2:	2d 81       	ldd	r18, Y+5	; 0x05
     ec4:	3e 81       	ldd	r19, Y+6	; 0x06
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	2c f4       	brge	.+10     	; 0xed6 <DIO_u8SetPinDirection+0x238>
     ecc:	8d 81       	ldd	r24, Y+5	; 0x05
     ece:	9e 81       	ldd	r25, Y+6	; 0x06
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	71 f0       	breq	.+28     	; 0xef0 <DIO_u8SetPinDirection+0x252>
     ed4:	a9 c0       	rjmp	.+338    	; 0x1028 <DIO_u8SetPinDirection+0x38a>
     ed6:	2d 81       	ldd	r18, Y+5	; 0x05
     ed8:	3e 81       	ldd	r19, Y+6	; 0x06
     eda:	22 30       	cpi	r18, 0x02	; 2
     edc:	31 05       	cpc	r19, r1
     ede:	09 f4       	brne	.+2      	; 0xee2 <DIO_u8SetPinDirection+0x244>
     ee0:	55 c0       	rjmp	.+170    	; 0xf8c <DIO_u8SetPinDirection+0x2ee>
     ee2:	8d 81       	ldd	r24, Y+5	; 0x05
     ee4:	9e 81       	ldd	r25, Y+6	; 0x06
     ee6:	83 30       	cpi	r24, 0x03	; 3
     ee8:	91 05       	cpc	r25, r1
     eea:	09 f4       	brne	.+2      	; 0xeee <DIO_u8SetPinDirection+0x250>
     eec:	76 c0       	rjmp	.+236    	; 0xfda <DIO_u8SetPinDirection+0x33c>
     eee:	9c c0       	rjmp	.+312    	; 0x1028 <DIO_u8SetPinDirection+0x38a>
				{
				case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); SET_BIT(PORTA,Copy_u8Pin); break;
     ef0:	aa e3       	ldi	r26, 0x3A	; 58
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	ea e3       	ldi	r30, 0x3A	; 58
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	48 2f       	mov	r20, r24
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_u8SetPinDirection+0x26e>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	2a 95       	dec	r18
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_u8SetPinDirection+0x26a>
     f10:	80 95       	com	r24
     f12:	84 23       	and	r24, r20
     f14:	8c 93       	st	X, r24
     f16:	ab e3       	ldi	r26, 0x3B	; 59
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	eb e3       	ldi	r30, 0x3B	; 59
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_u8SetPinDirection+0x296>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_u8SetPinDirection+0x292>
     f38:	84 2b       	or	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	7d c0       	rjmp	.+250    	; 0x1038 <DIO_u8SetPinDirection+0x39a>
				case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); SET_BIT(PORTB,Copy_u8Pin); break;
     f3e:	a7 e3       	ldi	r26, 0x37	; 55
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e7 e3       	ldi	r30, 0x37	; 55
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_u8SetPinDirection+0x2bc>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	2a 95       	dec	r18
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_u8SetPinDirection+0x2b8>
     f5e:	80 95       	com	r24
     f60:	84 23       	and	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	a8 e3       	ldi	r26, 0x38	; 56
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e8 e3       	ldi	r30, 0x38	; 56
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <DIO_u8SetPinDirection+0x2e4>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <DIO_u8SetPinDirection+0x2e0>
     f86:	84 2b       	or	r24, r20
     f88:	8c 93       	st	X, r24
     f8a:	56 c0       	rjmp	.+172    	; 0x1038 <DIO_u8SetPinDirection+0x39a>
				case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); SET_BIT(PORTC,Copy_u8Pin); break;
     f8c:	a4 e3       	ldi	r26, 0x34	; 52
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e4 e3       	ldi	r30, 0x34	; 52
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <DIO_u8SetPinDirection+0x30a>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	2a 95       	dec	r18
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <DIO_u8SetPinDirection+0x306>
     fac:	80 95       	com	r24
     fae:	84 23       	and	r24, r20
     fb0:	8c 93       	st	X, r24
     fb2:	a5 e3       	ldi	r26, 0x35	; 53
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e5 e3       	ldi	r30, 0x35	; 53
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <DIO_u8SetPinDirection+0x332>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <DIO_u8SetPinDirection+0x32e>
     fd4:	84 2b       	or	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	2f c0       	rjmp	.+94     	; 0x1038 <DIO_u8SetPinDirection+0x39a>
				case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); SET_BIT(PORTD,Copy_u8Pin); break;
     fda:	a1 e3       	ldi	r26, 0x31	; 49
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e1 e3       	ldi	r30, 0x31	; 49
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_u8SetPinDirection+0x358>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	2a 95       	dec	r18
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_u8SetPinDirection+0x354>
     ffa:	80 95       	com	r24
     ffc:	84 23       	and	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	a2 e3       	ldi	r26, 0x32	; 50
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e2 e3       	ldi	r30, 0x32	; 50
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_u8SetPinDirection+0x380>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_u8SetPinDirection+0x37c>
    1022:	84 2b       	or	r24, r20
    1024:	8c 93       	st	X, r24
    1026:	08 c0       	rjmp	.+16     	; 0x1038 <DIO_u8SetPinDirection+0x39a>
				default: Local_u8ErrorState=1; break;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	05 c0       	rjmp	.+10     	; 0x1038 <DIO_u8SetPinDirection+0x39a>
				}
			}
		else
		{
			Local_u8ErrorState=1;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <DIO_u8SetPinDirection+0x39a>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1038:	89 81       	ldd	r24, Y+1	; 0x01
}
    103a:	2a 96       	adiw	r28, 0x0a	; 10
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	00 d0       	rcall	.+0      	; 0x1052 <DIO_u8SetPortDirection+0x6>
    1052:	00 d0       	rcall	.+0      	; 0x1054 <DIO_u8SetPortDirection+0x8>
    1054:	0f 92       	push	r0
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	8a 83       	std	Y+2, r24	; 0x02
    105c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    105e:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	3d 83       	std	Y+5, r19	; 0x05
    1068:	2c 83       	std	Y+4, r18	; 0x04
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	9d 81       	ldd	r25, Y+5	; 0x05
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	91 05       	cpc	r25, r1
    1072:	d1 f0       	breq	.+52     	; 0x10a8 <DIO_u8SetPortDirection+0x5c>
    1074:	2c 81       	ldd	r18, Y+4	; 0x04
    1076:	3d 81       	ldd	r19, Y+5	; 0x05
    1078:	22 30       	cpi	r18, 0x02	; 2
    107a:	31 05       	cpc	r19, r1
    107c:	2c f4       	brge	.+10     	; 0x1088 <DIO_u8SetPortDirection+0x3c>
    107e:	8c 81       	ldd	r24, Y+4	; 0x04
    1080:	9d 81       	ldd	r25, Y+5	; 0x05
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	61 f0       	breq	.+24     	; 0x109e <DIO_u8SetPortDirection+0x52>
    1086:	1f c0       	rjmp	.+62     	; 0x10c6 <DIO_u8SetPortDirection+0x7a>
    1088:	2c 81       	ldd	r18, Y+4	; 0x04
    108a:	3d 81       	ldd	r19, Y+5	; 0x05
    108c:	22 30       	cpi	r18, 0x02	; 2
    108e:	31 05       	cpc	r19, r1
    1090:	81 f0       	breq	.+32     	; 0x10b2 <DIO_u8SetPortDirection+0x66>
    1092:	8c 81       	ldd	r24, Y+4	; 0x04
    1094:	9d 81       	ldd	r25, Y+5	; 0x05
    1096:	83 30       	cpi	r24, 0x03	; 3
    1098:	91 05       	cpc	r25, r1
    109a:	81 f0       	breq	.+32     	; 0x10bc <DIO_u8SetPortDirection+0x70>
    109c:	14 c0       	rjmp	.+40     	; 0x10c6 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
    109e:	ea e3       	ldi	r30, 0x3A	; 58
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	80 83       	st	Z, r24
    10a6:	11 c0       	rjmp	.+34     	; 0x10ca <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
    10a8:	e7 e3       	ldi	r30, 0x37	; 55
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	80 83       	st	Z, r24
    10b0:	0c c0       	rjmp	.+24     	; 0x10ca <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
    10b2:	e4 e3       	ldi	r30, 0x34	; 52
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	80 83       	st	Z, r24
    10ba:	07 c0       	rjmp	.+14     	; 0x10ca <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
    10bc:	e1 e3       	ldi	r30, 0x31	; 49
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	80 83       	st	Z, r24
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=1;
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	28 97       	sbiw	r28, 0x08	; 8
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	8a 83       	std	Y+2, r24	; 0x02
    10f2:	6b 83       	std	Y+3, r22	; 0x03
    10f4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    10f6:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	88 30       	cpi	r24, 0x08	; 8
    10fc:	08 f0       	brcs	.+2      	; 0x1100 <DIO_u8SetPinValue+0x24>
    10fe:	f4 c0       	rjmp	.+488    	; 0x12e8 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	88 23       	and	r24, r24
    1104:	09 f0       	breq	.+2      	; 0x1108 <DIO_u8SetPinValue+0x2c>
    1106:	77 c0       	rjmp	.+238    	; 0x11f6 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	38 87       	std	Y+8, r19	; 0x08
    1110:	2f 83       	std	Y+7, r18	; 0x07
    1112:	8f 81       	ldd	r24, Y+7	; 0x07
    1114:	98 85       	ldd	r25, Y+8	; 0x08
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	91 05       	cpc	r25, r1
    111a:	59 f1       	breq	.+86     	; 0x1172 <DIO_u8SetPinValue+0x96>
    111c:	2f 81       	ldd	r18, Y+7	; 0x07
    111e:	38 85       	ldd	r19, Y+8	; 0x08
    1120:	22 30       	cpi	r18, 0x02	; 2
    1122:	31 05       	cpc	r19, r1
    1124:	2c f4       	brge	.+10     	; 0x1130 <DIO_u8SetPinValue+0x54>
    1126:	8f 81       	ldd	r24, Y+7	; 0x07
    1128:	98 85       	ldd	r25, Y+8	; 0x08
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	69 f0       	breq	.+26     	; 0x1148 <DIO_u8SetPinValue+0x6c>
    112e:	60 c0       	rjmp	.+192    	; 0x11f0 <DIO_u8SetPinValue+0x114>
    1130:	2f 81       	ldd	r18, Y+7	; 0x07
    1132:	38 85       	ldd	r19, Y+8	; 0x08
    1134:	22 30       	cpi	r18, 0x02	; 2
    1136:	31 05       	cpc	r19, r1
    1138:	89 f1       	breq	.+98     	; 0x119c <DIO_u8SetPinValue+0xc0>
    113a:	8f 81       	ldd	r24, Y+7	; 0x07
    113c:	98 85       	ldd	r25, Y+8	; 0x08
    113e:	83 30       	cpi	r24, 0x03	; 3
    1140:	91 05       	cpc	r25, r1
    1142:	09 f4       	brne	.+2      	; 0x1146 <DIO_u8SetPinValue+0x6a>
    1144:	40 c0       	rjmp	.+128    	; 0x11c6 <DIO_u8SetPinValue+0xea>
    1146:	54 c0       	rjmp	.+168    	; 0x11f0 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    1148:	ab e3       	ldi	r26, 0x3B	; 59
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	eb e3       	ldi	r30, 0x3B	; 59
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 2e       	mov	r0, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_u8SetPinValue+0x8a>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_u8SetPinValue+0x86>
    116a:	80 95       	com	r24
    116c:	84 23       	and	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	bd c0       	rjmp	.+378    	; 0x12ec <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    1172:	a8 e3       	ldi	r26, 0x38	; 56
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e8 e3       	ldi	r30, 0x38	; 56
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 2e       	mov	r0, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <DIO_u8SetPinValue+0xb4>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <DIO_u8SetPinValue+0xb0>
    1194:	80 95       	com	r24
    1196:	84 23       	and	r24, r20
    1198:	8c 93       	st	X, r24
    119a:	a8 c0       	rjmp	.+336    	; 0x12ec <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    119c:	a5 e3       	ldi	r26, 0x35	; 53
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e5 e3       	ldi	r30, 0x35	; 53
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <DIO_u8SetPinValue+0xde>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <DIO_u8SetPinValue+0xda>
    11be:	80 95       	com	r24
    11c0:	84 23       	and	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	93 c0       	rjmp	.+294    	; 0x12ec <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    11c6:	a2 e3       	ldi	r26, 0x32	; 50
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e2 e3       	ldi	r30, 0x32	; 50
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	48 2f       	mov	r20, r24
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	02 2e       	mov	r0, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <DIO_u8SetPinValue+0x108>
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	0a 94       	dec	r0
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <DIO_u8SetPinValue+0x104>
    11e8:	80 95       	com	r24
    11ea:	84 23       	and	r24, r20
    11ec:	8c 93       	st	X, r24
    11ee:	7e c0       	rjmp	.+252    	; 0x12ec <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	89 83       	std	Y+1, r24	; 0x01
    11f4:	7b c0       	rjmp	.+246    	; 0x12ec <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
    11f6:	8c 81       	ldd	r24, Y+4	; 0x04
    11f8:	81 30       	cpi	r24, 0x01	; 1
    11fa:	09 f0       	breq	.+2      	; 0x11fe <DIO_u8SetPinValue+0x122>
    11fc:	72 c0       	rjmp	.+228    	; 0x12e2 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	3e 83       	std	Y+6, r19	; 0x06
    1206:	2d 83       	std	Y+5, r18	; 0x05
    1208:	8d 81       	ldd	r24, Y+5	; 0x05
    120a:	9e 81       	ldd	r25, Y+6	; 0x06
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	91 05       	cpc	r25, r1
    1210:	49 f1       	breq	.+82     	; 0x1264 <DIO_u8SetPinValue+0x188>
    1212:	2d 81       	ldd	r18, Y+5	; 0x05
    1214:	3e 81       	ldd	r19, Y+6	; 0x06
    1216:	22 30       	cpi	r18, 0x02	; 2
    1218:	31 05       	cpc	r19, r1
    121a:	2c f4       	brge	.+10     	; 0x1226 <DIO_u8SetPinValue+0x14a>
    121c:	8d 81       	ldd	r24, Y+5	; 0x05
    121e:	9e 81       	ldd	r25, Y+6	; 0x06
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	61 f0       	breq	.+24     	; 0x123c <DIO_u8SetPinValue+0x160>
    1224:	5b c0       	rjmp	.+182    	; 0x12dc <DIO_u8SetPinValue+0x200>
    1226:	2d 81       	ldd	r18, Y+5	; 0x05
    1228:	3e 81       	ldd	r19, Y+6	; 0x06
    122a:	22 30       	cpi	r18, 0x02	; 2
    122c:	31 05       	cpc	r19, r1
    122e:	71 f1       	breq	.+92     	; 0x128c <DIO_u8SetPinValue+0x1b0>
    1230:	8d 81       	ldd	r24, Y+5	; 0x05
    1232:	9e 81       	ldd	r25, Y+6	; 0x06
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	91 05       	cpc	r25, r1
    1238:	e9 f1       	breq	.+122    	; 0x12b4 <DIO_u8SetPinValue+0x1d8>
    123a:	50 c0       	rjmp	.+160    	; 0x12dc <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    123c:	ab e3       	ldi	r26, 0x3B	; 59
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	eb e3       	ldi	r30, 0x3B	; 59
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 2e       	mov	r0, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <DIO_u8SetPinValue+0x17e>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <DIO_u8SetPinValue+0x17a>
    125e:	84 2b       	or	r24, r20
    1260:	8c 93       	st	X, r24
    1262:	44 c0       	rjmp	.+136    	; 0x12ec <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    1264:	a8 e3       	ldi	r26, 0x38	; 56
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e8 e3       	ldi	r30, 0x38	; 56
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	48 2f       	mov	r20, r24
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 2e       	mov	r0, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <DIO_u8SetPinValue+0x1a6>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	0a 94       	dec	r0
    1284:	e2 f7       	brpl	.-8      	; 0x127e <DIO_u8SetPinValue+0x1a2>
    1286:	84 2b       	or	r24, r20
    1288:	8c 93       	st	X, r24
    128a:	30 c0       	rjmp	.+96     	; 0x12ec <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    128c:	a5 e3       	ldi	r26, 0x35	; 53
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e5 e3       	ldi	r30, 0x35	; 53
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	48 2f       	mov	r20, r24
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 2e       	mov	r0, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <DIO_u8SetPinValue+0x1ce>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <DIO_u8SetPinValue+0x1ca>
    12ae:	84 2b       	or	r24, r20
    12b0:	8c 93       	st	X, r24
    12b2:	1c c0       	rjmp	.+56     	; 0x12ec <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    12b4:	a2 e3       	ldi	r26, 0x32	; 50
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e2 e3       	ldi	r30, 0x32	; 50
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_u8SetPinValue+0x1f6>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_u8SetPinValue+0x1f2>
    12d6:	84 2b       	or	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	08 c0       	rjmp	.+16     	; 0x12ec <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	89 83       	std	Y+1, r24	; 0x01
    12e0:	05 c0       	rjmp	.+10     	; 0x12ec <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	89 83       	std	Y+1, r24	; 0x01
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ee:	28 96       	adiw	r28, 0x08	; 8
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	00 d0       	rcall	.+0      	; 0x1306 <DIO_u8SetPortValue+0x6>
    1306:	00 d0       	rcall	.+0      	; 0x1308 <DIO_u8SetPortValue+0x8>
    1308:	0f 92       	push	r0
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	8a 83       	std	Y+2, r24	; 0x02
    1310:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1312:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	3d 83       	std	Y+5, r19	; 0x05
    131c:	2c 83       	std	Y+4, r18	; 0x04
    131e:	8c 81       	ldd	r24, Y+4	; 0x04
    1320:	9d 81       	ldd	r25, Y+5	; 0x05
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	91 05       	cpc	r25, r1
    1326:	d1 f0       	breq	.+52     	; 0x135c <DIO_u8SetPortValue+0x5c>
    1328:	2c 81       	ldd	r18, Y+4	; 0x04
    132a:	3d 81       	ldd	r19, Y+5	; 0x05
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	2c f4       	brge	.+10     	; 0x133c <DIO_u8SetPortValue+0x3c>
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	9d 81       	ldd	r25, Y+5	; 0x05
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	61 f0       	breq	.+24     	; 0x1352 <DIO_u8SetPortValue+0x52>
    133a:	1f c0       	rjmp	.+62     	; 0x137a <DIO_u8SetPortValue+0x7a>
    133c:	2c 81       	ldd	r18, Y+4	; 0x04
    133e:	3d 81       	ldd	r19, Y+5	; 0x05
    1340:	22 30       	cpi	r18, 0x02	; 2
    1342:	31 05       	cpc	r19, r1
    1344:	81 f0       	breq	.+32     	; 0x1366 <DIO_u8SetPortValue+0x66>
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	9d 81       	ldd	r25, Y+5	; 0x05
    134a:	83 30       	cpi	r24, 0x03	; 3
    134c:	91 05       	cpc	r25, r1
    134e:	81 f0       	breq	.+32     	; 0x1370 <DIO_u8SetPortValue+0x70>
    1350:	14 c0       	rjmp	.+40     	; 0x137a <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    1352:	eb e3       	ldi	r30, 0x3B	; 59
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	80 83       	st	Z, r24
    135a:	11 c0       	rjmp	.+34     	; 0x137e <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    135c:	e8 e3       	ldi	r30, 0x38	; 56
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	80 83       	st	Z, r24
    1364:	0c c0       	rjmp	.+24     	; 0x137e <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    1366:	e5 e3       	ldi	r30, 0x35	; 53
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	80 83       	st	Z, r24
    136e:	07 c0       	rjmp	.+14     	; 0x137e <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    1370:	e2 e3       	ldi	r30, 0x32	; 50
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	80 83       	st	Z, r24
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    137e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <DIO_u8TogglePinValue>:

u8 DIO_u8TogglePinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	00 d0       	rcall	.+0      	; 0x1396 <DIO_u8TogglePinValue+0x6>
    1396:	00 d0       	rcall	.+0      	; 0x1398 <DIO_u8TogglePinValue+0x8>
    1398:	0f 92       	push	r0
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	8a 83       	std	Y+2, r24	; 0x02
    13a0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    13a2:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	3d 83       	std	Y+5, r19	; 0x05
    13ac:	2c 83       	std	Y+4, r18	; 0x04
    13ae:	8c 81       	ldd	r24, Y+4	; 0x04
    13b0:	9d 81       	ldd	r25, Y+5	; 0x05
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	91 05       	cpc	r25, r1
    13b6:	49 f1       	breq	.+82     	; 0x140a <DIO_u8TogglePinValue+0x7a>
    13b8:	2c 81       	ldd	r18, Y+4	; 0x04
    13ba:	3d 81       	ldd	r19, Y+5	; 0x05
    13bc:	22 30       	cpi	r18, 0x02	; 2
    13be:	31 05       	cpc	r19, r1
    13c0:	2c f4       	brge	.+10     	; 0x13cc <DIO_u8TogglePinValue+0x3c>
    13c2:	8c 81       	ldd	r24, Y+4	; 0x04
    13c4:	9d 81       	ldd	r25, Y+5	; 0x05
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	61 f0       	breq	.+24     	; 0x13e2 <DIO_u8TogglePinValue+0x52>
    13ca:	5b c0       	rjmp	.+182    	; 0x1482 <DIO_u8TogglePinValue+0xf2>
    13cc:	2c 81       	ldd	r18, Y+4	; 0x04
    13ce:	3d 81       	ldd	r19, Y+5	; 0x05
    13d0:	22 30       	cpi	r18, 0x02	; 2
    13d2:	31 05       	cpc	r19, r1
    13d4:	71 f1       	breq	.+92     	; 0x1432 <DIO_u8TogglePinValue+0xa2>
    13d6:	8c 81       	ldd	r24, Y+4	; 0x04
    13d8:	9d 81       	ldd	r25, Y+5	; 0x05
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	91 05       	cpc	r25, r1
    13de:	e9 f1       	breq	.+122    	; 0x145a <DIO_u8TogglePinValue+0xca>
    13e0:	50 c0       	rjmp	.+160    	; 0x1482 <DIO_u8TogglePinValue+0xf2>
	{
	case DIO_u8PORTA: TOOGLE_BIT(PORTA,Copy_u8Pin); break;
    13e2:	ab e3       	ldi	r26, 0x3B	; 59
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	eb e3       	ldi	r30, 0x3B	; 59
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <DIO_u8TogglePinValue+0x70>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <DIO_u8TogglePinValue+0x6c>
    1404:	84 27       	eor	r24, r20
    1406:	8c 93       	st	X, r24
    1408:	3e c0       	rjmp	.+124    	; 0x1486 <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTB: TOOGLE_BIT(PORTB,Copy_u8Pin); break;
    140a:	a8 e3       	ldi	r26, 0x38	; 56
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e8 e3       	ldi	r30, 0x38	; 56
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	48 2f       	mov	r20, r24
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 2e       	mov	r0, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <DIO_u8TogglePinValue+0x98>
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	0a 94       	dec	r0
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <DIO_u8TogglePinValue+0x94>
    142c:	84 27       	eor	r24, r20
    142e:	8c 93       	st	X, r24
    1430:	2a c0       	rjmp	.+84     	; 0x1486 <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTC: TOOGLE_BIT(PORTC,Copy_u8Pin); break;
    1432:	a5 e3       	ldi	r26, 0x35	; 53
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e5 e3       	ldi	r30, 0x35	; 53
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	48 2f       	mov	r20, r24
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	02 2e       	mov	r0, r18
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <DIO_u8TogglePinValue+0xc0>
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	0a 94       	dec	r0
    1452:	e2 f7       	brpl	.-8      	; 0x144c <DIO_u8TogglePinValue+0xbc>
    1454:	84 27       	eor	r24, r20
    1456:	8c 93       	st	X, r24
    1458:	16 c0       	rjmp	.+44     	; 0x1486 <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTD: TOOGLE_BIT(PORTD,Copy_u8Pin); break;
    145a:	a2 e3       	ldi	r26, 0x32	; 50
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e2 e3       	ldi	r30, 0x32	; 50
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	48 2f       	mov	r20, r24
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 2e       	mov	r0, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <DIO_u8TogglePinValue+0xe8>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	0a 94       	dec	r0
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <DIO_u8TogglePinValue+0xe4>
    147c:	84 27       	eor	r24, r20
    147e:	8c 93       	st	X, r24
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_u8TogglePinValue+0xf6>
	default: Local_u8ErrorState=1;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1486:	89 81       	ldd	r24, Y+1	; 0x01
}
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	27 97       	sbiw	r28, 0x07	; 7
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	8a 83       	std	Y+2, r24	; 0x02
    14ae:	6b 83       	std	Y+3, r22	; 0x03
    14b0:	5d 83       	std	Y+5, r21	; 0x05
    14b2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    14b4:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<= DIO_u8PIN7))
    14b6:	8c 81       	ldd	r24, Y+4	; 0x04
    14b8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <DIO_u8GetPinValue+0x28>
    14be:	78 c0       	rjmp	.+240    	; 0x15b0 <DIO_u8GetPinValue+0x118>
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	88 30       	cpi	r24, 0x08	; 8
    14c4:	08 f0       	brcs	.+2      	; 0x14c8 <DIO_u8GetPinValue+0x30>
    14c6:	74 c0       	rjmp	.+232    	; 0x15b0 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	3f 83       	std	Y+7, r19	; 0x07
    14d0:	2e 83       	std	Y+6, r18	; 0x06
    14d2:	4e 81       	ldd	r20, Y+6	; 0x06
    14d4:	5f 81       	ldd	r21, Y+7	; 0x07
    14d6:	41 30       	cpi	r20, 0x01	; 1
    14d8:	51 05       	cpc	r21, r1
    14da:	59 f1       	breq	.+86     	; 0x1532 <DIO_u8GetPinValue+0x9a>
    14dc:	8e 81       	ldd	r24, Y+6	; 0x06
    14de:	9f 81       	ldd	r25, Y+7	; 0x07
    14e0:	82 30       	cpi	r24, 0x02	; 2
    14e2:	91 05       	cpc	r25, r1
    14e4:	34 f4       	brge	.+12     	; 0x14f2 <DIO_u8GetPinValue+0x5a>
    14e6:	2e 81       	ldd	r18, Y+6	; 0x06
    14e8:	3f 81       	ldd	r19, Y+7	; 0x07
    14ea:	21 15       	cp	r18, r1
    14ec:	31 05       	cpc	r19, r1
    14ee:	69 f0       	breq	.+26     	; 0x150a <DIO_u8GetPinValue+0x72>
    14f0:	5c c0       	rjmp	.+184    	; 0x15aa <DIO_u8GetPinValue+0x112>
    14f2:	4e 81       	ldd	r20, Y+6	; 0x06
    14f4:	5f 81       	ldd	r21, Y+7	; 0x07
    14f6:	42 30       	cpi	r20, 0x02	; 2
    14f8:	51 05       	cpc	r21, r1
    14fa:	79 f1       	breq	.+94     	; 0x155a <DIO_u8GetPinValue+0xc2>
    14fc:	8e 81       	ldd	r24, Y+6	; 0x06
    14fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1500:	83 30       	cpi	r24, 0x03	; 3
    1502:	91 05       	cpc	r25, r1
    1504:	09 f4       	brne	.+2      	; 0x1508 <DIO_u8GetPinValue+0x70>
    1506:	3d c0       	rjmp	.+122    	; 0x1582 <DIO_u8GetPinValue+0xea>
    1508:	50 c0       	rjmp	.+160    	; 0x15aa <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA : *Copy_pu8Value= GET_BIT(PINA , Copy_u8Pin); break;
    150a:	e9 e3       	ldi	r30, 0x39	; 57
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	88 2f       	mov	r24, r24
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	a9 01       	movw	r20, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <DIO_u8GetPinValue+0x8a>
    151e:	55 95       	asr	r21
    1520:	47 95       	ror	r20
    1522:	8a 95       	dec	r24
    1524:	e2 f7       	brpl	.-8      	; 0x151e <DIO_u8GetPinValue+0x86>
    1526:	ca 01       	movw	r24, r20
    1528:	81 70       	andi	r24, 0x01	; 1
    152a:	ec 81       	ldd	r30, Y+4	; 0x04
    152c:	fd 81       	ldd	r31, Y+5	; 0x05
    152e:	80 83       	st	Z, r24
    1530:	41 c0       	rjmp	.+130    	; 0x15b4 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB : *Copy_pu8Value= GET_BIT(PINB , Copy_u8Pin); break;
    1532:	e6 e3       	ldi	r30, 0x36	; 54
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	88 2f       	mov	r24, r24
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	a9 01       	movw	r20, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <DIO_u8GetPinValue+0xb2>
    1546:	55 95       	asr	r21
    1548:	47 95       	ror	r20
    154a:	8a 95       	dec	r24
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <DIO_u8GetPinValue+0xae>
    154e:	ca 01       	movw	r24, r20
    1550:	81 70       	andi	r24, 0x01	; 1
    1552:	ec 81       	ldd	r30, Y+4	; 0x04
    1554:	fd 81       	ldd	r31, Y+5	; 0x05
    1556:	80 83       	st	Z, r24
    1558:	2d c0       	rjmp	.+90     	; 0x15b4 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC : *Copy_pu8Value= GET_BIT(PINC , Copy_u8Pin); break;
    155a:	e3 e3       	ldi	r30, 0x33	; 51
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	88 2f       	mov	r24, r24
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	a9 01       	movw	r20, r18
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <DIO_u8GetPinValue+0xda>
    156e:	55 95       	asr	r21
    1570:	47 95       	ror	r20
    1572:	8a 95       	dec	r24
    1574:	e2 f7       	brpl	.-8      	; 0x156e <DIO_u8GetPinValue+0xd6>
    1576:	ca 01       	movw	r24, r20
    1578:	81 70       	andi	r24, 0x01	; 1
    157a:	ec 81       	ldd	r30, Y+4	; 0x04
    157c:	fd 81       	ldd	r31, Y+5	; 0x05
    157e:	80 83       	st	Z, r24
    1580:	19 c0       	rjmp	.+50     	; 0x15b4 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD : *Copy_pu8Value= GET_BIT(PIND , Copy_u8Pin); break;
    1582:	e0 e3       	ldi	r30, 0x30	; 48
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	88 2f       	mov	r24, r24
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	a9 01       	movw	r20, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <DIO_u8GetPinValue+0x102>
    1596:	55 95       	asr	r21
    1598:	47 95       	ror	r20
    159a:	8a 95       	dec	r24
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <DIO_u8GetPinValue+0xfe>
    159e:	ca 01       	movw	r24, r20
    15a0:	81 70       	andi	r24, 0x01	; 1
    15a2:	ec 81       	ldd	r30, Y+4	; 0x04
    15a4:	fd 81       	ldd	r31, Y+5	; 0x05
    15a6:	80 83       	st	Z, r24
    15a8:	05 c0       	rjmp	.+10     	; 0x15b4 <DIO_u8GetPinValue+0x11c>
		default: Local_u8ErrorState=1;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b6:	27 96       	adiw	r28, 0x07	; 7
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port , u8* Copy_pu8Value)
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	27 97       	sbiw	r28, 0x07	; 7
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	de bf       	out	0x3e, r29	; 62
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	cd bf       	out	0x3d, r28	; 61
    15dc:	8b 83       	std	Y+3, r24	; 0x03
    15de:	7d 83       	std	Y+5, r23	; 0x05
    15e0:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = 0;
    15e2:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter;
	if(Copy_pu8Value != NULL)
    15e4:	8c 81       	ldd	r24, Y+4	; 0x04
    15e6:	9d 81       	ldd	r25, Y+5	; 0x05
    15e8:	00 97       	sbiw	r24, 0x00	; 0
    15ea:	09 f4       	brne	.+2      	; 0x15ee <DIO_u8GetPortValue+0x26>
    15ec:	3e c0       	rjmp	.+124    	; 0x166a <DIO_u8GetPortValue+0xa2>
	{
		switch(Copy_u8Port)
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	3f 83       	std	Y+7, r19	; 0x07
    15f6:	2e 83       	std	Y+6, r18	; 0x06
    15f8:	8e 81       	ldd	r24, Y+6	; 0x06
    15fa:	9f 81       	ldd	r25, Y+7	; 0x07
    15fc:	81 30       	cpi	r24, 0x01	; 1
    15fe:	91 05       	cpc	r25, r1
    1600:	e1 f0       	breq	.+56     	; 0x163a <DIO_u8GetPortValue+0x72>
    1602:	2e 81       	ldd	r18, Y+6	; 0x06
    1604:	3f 81       	ldd	r19, Y+7	; 0x07
    1606:	22 30       	cpi	r18, 0x02	; 2
    1608:	31 05       	cpc	r19, r1
    160a:	2c f4       	brge	.+10     	; 0x1616 <DIO_u8GetPortValue+0x4e>
    160c:	8e 81       	ldd	r24, Y+6	; 0x06
    160e:	9f 81       	ldd	r25, Y+7	; 0x07
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	61 f0       	breq	.+24     	; 0x162c <DIO_u8GetPortValue+0x64>
    1614:	27 c0       	rjmp	.+78     	; 0x1664 <DIO_u8GetPortValue+0x9c>
    1616:	2e 81       	ldd	r18, Y+6	; 0x06
    1618:	3f 81       	ldd	r19, Y+7	; 0x07
    161a:	22 30       	cpi	r18, 0x02	; 2
    161c:	31 05       	cpc	r19, r1
    161e:	a1 f0       	breq	.+40     	; 0x1648 <DIO_u8GetPortValue+0x80>
    1620:	8e 81       	ldd	r24, Y+6	; 0x06
    1622:	9f 81       	ldd	r25, Y+7	; 0x07
    1624:	83 30       	cpi	r24, 0x03	; 3
    1626:	91 05       	cpc	r25, r1
    1628:	b1 f0       	breq	.+44     	; 0x1656 <DIO_u8GetPortValue+0x8e>
    162a:	1c c0       	rjmp	.+56     	; 0x1664 <DIO_u8GetPortValue+0x9c>
		{
		case DIO_u8PORTA: *Copy_pu8Value = PINA; break;
    162c:	e9 e3       	ldi	r30, 0x39	; 57
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	ec 81       	ldd	r30, Y+4	; 0x04
    1634:	fd 81       	ldd	r31, Y+5	; 0x05
    1636:	80 83       	st	Z, r24
    1638:	1a c0       	rjmp	.+52     	; 0x166e <DIO_u8GetPortValue+0xa6>
		case DIO_u8PORTB: *Copy_pu8Value = PINB; break;
    163a:	e6 e3       	ldi	r30, 0x36	; 54
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	ec 81       	ldd	r30, Y+4	; 0x04
    1642:	fd 81       	ldd	r31, Y+5	; 0x05
    1644:	80 83       	st	Z, r24
    1646:	13 c0       	rjmp	.+38     	; 0x166e <DIO_u8GetPortValue+0xa6>
		case DIO_u8PORTC: *Copy_pu8Value = PINC; break;
    1648:	e3 e3       	ldi	r30, 0x33	; 51
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	ec 81       	ldd	r30, Y+4	; 0x04
    1650:	fd 81       	ldd	r31, Y+5	; 0x05
    1652:	80 83       	st	Z, r24
    1654:	0c c0       	rjmp	.+24     	; 0x166e <DIO_u8GetPortValue+0xa6>
		case DIO_u8PORTD: *Copy_pu8Value = PIND; break;
    1656:	e0 e3       	ldi	r30, 0x30	; 48
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	ec 81       	ldd	r30, Y+4	; 0x04
    165e:	fd 81       	ldd	r31, Y+5	; 0x05
    1660:	80 83       	st	Z, r24
    1662:	05 c0       	rjmp	.+10     	; 0x166e <DIO_u8GetPortValue+0xa6>
		default: Local_u8ErrorState = 1; break;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	8a 83       	std	Y+2, r24	; 0x02
    1668:	02 c0       	rjmp	.+4      	; 0x166e <DIO_u8GetPortValue+0xa6>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1670:	27 96       	adiw	r28, 0x07	; 7
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	08 95       	ret

00001682 <EXTI_voidInt0Init>:
void (*EXTI_pvInt1Func)(void)=NULL;
void (*EXTI_pvInt2Func)(void)=NULL;


void EXTI_voidInt0Init(void)
{
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
#elif INT0_SENSE== ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC00);
	CLR_BIT(MCUCR,MCUCR_ISC01);

#elif INT0_SENSE== FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC00);
    168a:	a5 e5       	ldi	r26, 0x55	; 85
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e5 e5       	ldi	r30, 0x55	; 85
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	8e 7f       	andi	r24, 0xFE	; 254
    1696:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
    1698:	a5 e5       	ldi	r26, 0x55	; 85
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e5 e5       	ldi	r30, 0x55	; 85
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	82 60       	ori	r24, 0x02	; 2
    16a4:	8c 93       	st	X, r24
#error "Wrong INT0_SENSE configuration option"
#endif

	/*Check peripheral interrupt enable initial state*/
#if INT0_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
    16a6:	ab e5       	ldi	r26, 0x5B	; 91
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	eb e5       	ldi	r30, 0x5B	; 91
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	80 64       	ori	r24, 0x40	; 64
    16b2:	8c 93       	st	X, r24
#elif INT0_INITIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT0);
#else
#error " Wrong INT0_INITIAL_STATE configuration option"
#endif
}
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <EXTI_voidInt1Init>:


void EXTI_voidInt1Init(void)
{
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
#elif INT1_SENSE == ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);

#elif INT1_SENSE == FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC10);
    16c2:	a5 e5       	ldi	r26, 0x55	; 85
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e5 e5       	ldi	r30, 0x55	; 85
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	8b 7f       	andi	r24, 0xFB	; 251
    16ce:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
    16d0:	a5 e5       	ldi	r26, 0x55	; 85
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e5 e5       	ldi	r30, 0x55	; 85
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	88 60       	ori	r24, 0x08	; 8
    16dc:	8c 93       	st	X, r24
#else
#error "Wrong INT1_SENSE configuration option"
#endif

#if INT1_INITIAL_STATE  == ENABLED
	SET_BIT(GICR,GICR_INT1);
    16de:	ab e5       	ldi	r26, 0x5B	; 91
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	eb e5       	ldi	r30, 0x5B	; 91
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	80 68       	ori	r24, 0x80	; 128
    16ea:	8c 93       	st	X, r24
	CLR_BIT(GICR,GICR_INT1);

#else
#error " Wrong INT1_INITIAL_STATE configuration option"
#endif
}
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <EXTI_voidInt2Init>:

void EXTI_voidInt2Init(void)
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
#if INT2_SENSE == FALLING_EDGE
	CLR_BIT(MCUCSR,MCUCSR_INT2);
    16fa:	a4 e5       	ldi	r26, 0x54	; 84
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e4 e5       	ldi	r30, 0x54	; 84
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	8f 7b       	andi	r24, 0xBF	; 191
    1706:	8c 93       	st	X, r24

#if INT2_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT2);

#elif INT2_INITIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT2);
    1708:	ab e5       	ldi	r26, 0x5B	; 91
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	eb e5       	ldi	r30, 0x5B	; 91
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	8f 7d       	andi	r24, 0xDF	; 223
    1714:	8c 93       	st	X, r24

#else
#error " Wrong INT2_INITIAL_STATE configuration option"
#endif
}
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <EXTI_u8Int0SetSenseControl>:


u8 EXTI_u8Int0SetSenseControl(u8 Copy_u8Sense)
{
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	00 d0       	rcall	.+0      	; 0x1722 <EXTI_u8Int0SetSenseControl+0x6>
    1722:	00 d0       	rcall	.+0      	; 0x1724 <EXTI_u8Int0SetSenseControl+0x8>
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState= OK;
    172a:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Sense)
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	3c 83       	std	Y+4, r19	; 0x04
    1734:	2b 83       	std	Y+3, r18	; 0x03
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	9c 81       	ldd	r25, Y+4	; 0x04
    173a:	82 30       	cpi	r24, 0x02	; 2
    173c:	91 05       	cpc	r25, r1
    173e:	29 f1       	breq	.+74     	; 0x178a <EXTI_u8Int0SetSenseControl+0x6e>
    1740:	2b 81       	ldd	r18, Y+3	; 0x03
    1742:	3c 81       	ldd	r19, Y+4	; 0x04
    1744:	23 30       	cpi	r18, 0x03	; 3
    1746:	31 05       	cpc	r19, r1
    1748:	34 f4       	brge	.+12     	; 0x1756 <EXTI_u8Int0SetSenseControl+0x3a>
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	9c 81       	ldd	r25, Y+4	; 0x04
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	91 05       	cpc	r25, r1
    1752:	61 f0       	breq	.+24     	; 0x176c <EXTI_u8Int0SetSenseControl+0x50>
    1754:	47 c0       	rjmp	.+142    	; 0x17e4 <EXTI_u8Int0SetSenseControl+0xc8>
    1756:	2b 81       	ldd	r18, Y+3	; 0x03
    1758:	3c 81       	ldd	r19, Y+4	; 0x04
    175a:	23 30       	cpi	r18, 0x03	; 3
    175c:	31 05       	cpc	r19, r1
    175e:	21 f1       	breq	.+72     	; 0x17a8 <EXTI_u8Int0SetSenseControl+0x8c>
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	9c 81       	ldd	r25, Y+4	; 0x04
    1764:	84 30       	cpi	r24, 0x04	; 4
    1766:	91 05       	cpc	r25, r1
    1768:	71 f1       	breq	.+92     	; 0x17c6 <EXTI_u8Int0SetSenseControl+0xaa>
    176a:	3c c0       	rjmp	.+120    	; 0x17e4 <EXTI_u8Int0SetSenseControl+0xc8>
	{
	case LOW_LEVEL: CLR_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01); break;
    176c:	a5 e5       	ldi	r26, 0x55	; 85
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e5 e5       	ldi	r30, 0x55	; 85
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	8e 7f       	andi	r24, 0xFE	; 254
    1778:	8c 93       	st	X, r24
    177a:	a5 e5       	ldi	r26, 0x55	; 85
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e5 e5       	ldi	r30, 0x55	; 85
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	8d 7f       	andi	r24, 0xFD	; 253
    1786:	8c 93       	st	X, r24
    1788:	2f c0       	rjmp	.+94     	; 0x17e8 <EXTI_u8Int0SetSenseControl+0xcc>
	case ON_CHANGE:  SET_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01); break;
    178a:	a5 e5       	ldi	r26, 0x55	; 85
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e5 e5       	ldi	r30, 0x55	; 85
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	81 60       	ori	r24, 0x01	; 1
    1796:	8c 93       	st	X, r24
    1798:	a5 e5       	ldi	r26, 0x55	; 85
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e5 e5       	ldi	r30, 0x55	; 85
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	8d 7f       	andi	r24, 0xFD	; 253
    17a4:	8c 93       	st	X, r24
    17a6:	20 c0       	rjmp	.+64     	; 0x17e8 <EXTI_u8Int0SetSenseControl+0xcc>
	case FALLING_EDGE: CLR_BIT(MCUCR,MCUCR_ISC00); SET_BIT(MCUCR,MCUCR_ISC01); break;
    17a8:	a5 e5       	ldi	r26, 0x55	; 85
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e5 e5       	ldi	r30, 0x55	; 85
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	8e 7f       	andi	r24, 0xFE	; 254
    17b4:	8c 93       	st	X, r24
    17b6:	a5 e5       	ldi	r26, 0x55	; 85
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e5 e5       	ldi	r30, 0x55	; 85
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	82 60       	ori	r24, 0x02	; 2
    17c2:	8c 93       	st	X, r24
    17c4:	11 c0       	rjmp	.+34     	; 0x17e8 <EXTI_u8Int0SetSenseControl+0xcc>
	case RISING_EDGE: SET_BIT(MCUCR,MCUCR_ISC00); SET_BIT(MCUCR,MCUCR_ISC01); break;
    17c6:	a5 e5       	ldi	r26, 0x55	; 85
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e5 e5       	ldi	r30, 0x55	; 85
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	81 60       	ori	r24, 0x01	; 1
    17d2:	8c 93       	st	X, r24
    17d4:	a5 e5       	ldi	r26, 0x55	; 85
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e5 e5       	ldi	r30, 0x55	; 85
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	82 60       	ori	r24, 0x02	; 2
    17e0:	8c 93       	st	X, r24
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <EXTI_u8Int0SetSenseControl+0xcc>
	default: Local_u8ErrorState=NOK;
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <EXTI_u8Int1SetSenseControl>:

u8 EXTI_u8Int1SetSenseControl(u8 Copy_u8Sense)
{
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <EXTI_u8Int1SetSenseControl+0x6>
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <EXTI_u8Int1SetSenseControl+0x8>
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState= OK;
    1806:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Sense)
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	3c 83       	std	Y+4, r19	; 0x04
    1810:	2b 83       	std	Y+3, r18	; 0x03
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	9c 81       	ldd	r25, Y+4	; 0x04
    1816:	82 30       	cpi	r24, 0x02	; 2
    1818:	91 05       	cpc	r25, r1
    181a:	29 f1       	breq	.+74     	; 0x1866 <EXTI_u8Int1SetSenseControl+0x6e>
    181c:	2b 81       	ldd	r18, Y+3	; 0x03
    181e:	3c 81       	ldd	r19, Y+4	; 0x04
    1820:	23 30       	cpi	r18, 0x03	; 3
    1822:	31 05       	cpc	r19, r1
    1824:	34 f4       	brge	.+12     	; 0x1832 <EXTI_u8Int1SetSenseControl+0x3a>
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	9c 81       	ldd	r25, Y+4	; 0x04
    182a:	81 30       	cpi	r24, 0x01	; 1
    182c:	91 05       	cpc	r25, r1
    182e:	61 f0       	breq	.+24     	; 0x1848 <EXTI_u8Int1SetSenseControl+0x50>
    1830:	47 c0       	rjmp	.+142    	; 0x18c0 <EXTI_u8Int1SetSenseControl+0xc8>
    1832:	2b 81       	ldd	r18, Y+3	; 0x03
    1834:	3c 81       	ldd	r19, Y+4	; 0x04
    1836:	23 30       	cpi	r18, 0x03	; 3
    1838:	31 05       	cpc	r19, r1
    183a:	21 f1       	breq	.+72     	; 0x1884 <EXTI_u8Int1SetSenseControl+0x8c>
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	9c 81       	ldd	r25, Y+4	; 0x04
    1840:	84 30       	cpi	r24, 0x04	; 4
    1842:	91 05       	cpc	r25, r1
    1844:	71 f1       	breq	.+92     	; 0x18a2 <EXTI_u8Int1SetSenseControl+0xaa>
    1846:	3c c0       	rjmp	.+120    	; 0x18c0 <EXTI_u8Int1SetSenseControl+0xc8>
	{
	case LOW_LEVEL: CLR_BIT(MCUCR,MCUCR_ISC10); CLR_BIT(MCUCR,MCUCR_ISC11); break;
    1848:	a5 e5       	ldi	r26, 0x55	; 85
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e5 e5       	ldi	r30, 0x55	; 85
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	8b 7f       	andi	r24, 0xFB	; 251
    1854:	8c 93       	st	X, r24
    1856:	a5 e5       	ldi	r26, 0x55	; 85
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e5 e5       	ldi	r30, 0x55	; 85
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	87 7f       	andi	r24, 0xF7	; 247
    1862:	8c 93       	st	X, r24
    1864:	2f c0       	rjmp	.+94     	; 0x18c4 <EXTI_u8Int1SetSenseControl+0xcc>
	case ON_CHANGE:  SET_BIT(MCUCR,MCUCR_ISC10); CLR_BIT(MCUCR,MCUCR_ISC11); break;
    1866:	a5 e5       	ldi	r26, 0x55	; 85
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e5 e5       	ldi	r30, 0x55	; 85
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	84 60       	ori	r24, 0x04	; 4
    1872:	8c 93       	st	X, r24
    1874:	a5 e5       	ldi	r26, 0x55	; 85
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	e5 e5       	ldi	r30, 0x55	; 85
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	87 7f       	andi	r24, 0xF7	; 247
    1880:	8c 93       	st	X, r24
    1882:	20 c0       	rjmp	.+64     	; 0x18c4 <EXTI_u8Int1SetSenseControl+0xcc>
	case FALLING_EDGE: CLR_BIT(MCUCR,MCUCR_ISC10); SET_BIT(MCUCR,MCUCR_ISC11); break;
    1884:	a5 e5       	ldi	r26, 0x55	; 85
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e5 e5       	ldi	r30, 0x55	; 85
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	8b 7f       	andi	r24, 0xFB	; 251
    1890:	8c 93       	st	X, r24
    1892:	a5 e5       	ldi	r26, 0x55	; 85
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e5 e5       	ldi	r30, 0x55	; 85
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	88 60       	ori	r24, 0x08	; 8
    189e:	8c 93       	st	X, r24
    18a0:	11 c0       	rjmp	.+34     	; 0x18c4 <EXTI_u8Int1SetSenseControl+0xcc>
	case RISING_EDGE: SET_BIT(MCUCR,MCUCR_ISC10); SET_BIT(MCUCR,MCUCR_ISC11); break;
    18a2:	a5 e5       	ldi	r26, 0x55	; 85
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e5 e5       	ldi	r30, 0x55	; 85
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	84 60       	ori	r24, 0x04	; 4
    18ae:	8c 93       	st	X, r24
    18b0:	a5 e5       	ldi	r26, 0x55	; 85
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e5 e5       	ldi	r30, 0x55	; 85
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	88 60       	ori	r24, 0x08	; 8
    18bc:	8c 93       	st	X, r24
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <EXTI_u8Int1SetSenseControl+0xcc>
	default: Local_u8ErrorState=NOK;
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <EXTI_u8Int2SetSenseControl>:

u8 EXTI_u8Int2SetSenseControl(u8 Copy_u8Sense)
{
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	00 d0       	rcall	.+0      	; 0x18da <EXTI_u8Int2SetSenseControl+0x6>
    18da:	00 d0       	rcall	.+0      	; 0x18dc <EXTI_u8Int2SetSenseControl+0x8>
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    18e2:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Sense)
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	3c 83       	std	Y+4, r19	; 0x04
    18ec:	2b 83       	std	Y+3, r18	; 0x03
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	9c 81       	ldd	r25, Y+4	; 0x04
    18f2:	83 30       	cpi	r24, 0x03	; 3
    18f4:	91 05       	cpc	r25, r1
    18f6:	31 f0       	breq	.+12     	; 0x1904 <EXTI_u8Int2SetSenseControl+0x30>
    18f8:	2b 81       	ldd	r18, Y+3	; 0x03
    18fa:	3c 81       	ldd	r19, Y+4	; 0x04
    18fc:	24 30       	cpi	r18, 0x04	; 4
    18fe:	31 05       	cpc	r19, r1
    1900:	49 f0       	breq	.+18     	; 0x1914 <EXTI_u8Int2SetSenseControl+0x40>
    1902:	10 c0       	rjmp	.+32     	; 0x1924 <EXTI_u8Int2SetSenseControl+0x50>
	{
	case FALLING_EDGE: CLR_BIT(MCUCSR,MCUCSR_INT2); break;
    1904:	a4 e5       	ldi	r26, 0x54	; 84
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e4 e5       	ldi	r30, 0x54	; 84
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	8f 7b       	andi	r24, 0xBF	; 191
    1910:	8c 93       	st	X, r24
    1912:	0a c0       	rjmp	.+20     	; 0x1928 <EXTI_u8Int2SetSenseControl+0x54>
	case RISING_EDGE: SET_BIT(MCUCSR,MCUCSR_INT2); break;
    1914:	a4 e5       	ldi	r26, 0x54	; 84
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e4 e5       	ldi	r30, 0x54	; 84
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	80 64       	ori	r24, 0x40	; 64
    1920:	8c 93       	st	X, r24
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <EXTI_u8Int2SetSenseControl+0x54>
	default: Local_u8ErrorState	=NOK;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1928:	89 81       	ldd	r24, Y+1	; 0x01
}
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <EXTI_u8IntEnable>:

u8 EXTI_u8IntEnable(u8 Copy_u8Int)
{
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	00 d0       	rcall	.+0      	; 0x193e <EXTI_u8IntEnable+0x6>
    193e:	00 d0       	rcall	.+0      	; 0x1940 <EXTI_u8IntEnable+0x8>
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    1946:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Int)
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	3c 83       	std	Y+4, r19	; 0x04
    1950:	2b 83       	std	Y+3, r18	; 0x03
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	9c 81       	ldd	r25, Y+4	; 0x04
    1956:	81 30       	cpi	r24, 0x01	; 1
    1958:	91 05       	cpc	r25, r1
    195a:	89 f0       	breq	.+34     	; 0x197e <EXTI_u8IntEnable+0x46>
    195c:	2b 81       	ldd	r18, Y+3	; 0x03
    195e:	3c 81       	ldd	r19, Y+4	; 0x04
    1960:	22 30       	cpi	r18, 0x02	; 2
    1962:	31 05       	cpc	r19, r1
    1964:	a1 f0       	breq	.+40     	; 0x198e <EXTI_u8IntEnable+0x56>
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	9c 81       	ldd	r25, Y+4	; 0x04
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	c1 f4       	brne	.+48     	; 0x199e <EXTI_u8IntEnable+0x66>
	{
	case INT0: SET_BIT(GICR,GICR_INT0); break;
    196e:	ab e5       	ldi	r26, 0x5B	; 91
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	eb e5       	ldi	r30, 0x5B	; 91
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	80 64       	ori	r24, 0x40	; 64
    197a:	8c 93       	st	X, r24
    197c:	12 c0       	rjmp	.+36     	; 0x19a2 <EXTI_u8IntEnable+0x6a>
	case INT1: SET_BIT(GICR,GICR_INT1); break;
    197e:	ab e5       	ldi	r26, 0x5B	; 91
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	eb e5       	ldi	r30, 0x5B	; 91
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	80 68       	ori	r24, 0x80	; 128
    198a:	8c 93       	st	X, r24
    198c:	0a c0       	rjmp	.+20     	; 0x19a2 <EXTI_u8IntEnable+0x6a>
	case INT2: SET_BIT(GICR,GICR_INT2); break;
    198e:	ab e5       	ldi	r26, 0x5B	; 91
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	eb e5       	ldi	r30, 0x5B	; 91
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	80 62       	ori	r24, 0x20	; 32
    199a:	8c 93       	st	X, r24
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <EXTI_u8IntEnable+0x6a>
	default: Local_u8ErrorState	=NOK;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <EXTI_u8IntDisable>:

u8 EXTI_u8IntDisable(u8 Copy_u8Int)
{
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <EXTI_u8IntDisable+0x6>
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <EXTI_u8IntDisable+0x8>
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    19c0:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Int)
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	3c 83       	std	Y+4, r19	; 0x04
    19ca:	2b 83       	std	Y+3, r18	; 0x03
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	9c 81       	ldd	r25, Y+4	; 0x04
    19d0:	81 30       	cpi	r24, 0x01	; 1
    19d2:	91 05       	cpc	r25, r1
    19d4:	89 f0       	breq	.+34     	; 0x19f8 <EXTI_u8IntDisable+0x46>
    19d6:	2b 81       	ldd	r18, Y+3	; 0x03
    19d8:	3c 81       	ldd	r19, Y+4	; 0x04
    19da:	22 30       	cpi	r18, 0x02	; 2
    19dc:	31 05       	cpc	r19, r1
    19de:	a1 f0       	breq	.+40     	; 0x1a08 <EXTI_u8IntDisable+0x56>
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	9c 81       	ldd	r25, Y+4	; 0x04
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	c1 f4       	brne	.+48     	; 0x1a18 <EXTI_u8IntDisable+0x66>
	{
	case INT0: CLR_BIT(GICR,GICR_INT0); break;
    19e8:	ab e5       	ldi	r26, 0x5B	; 91
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	eb e5       	ldi	r30, 0x5B	; 91
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	8f 7b       	andi	r24, 0xBF	; 191
    19f4:	8c 93       	st	X, r24
    19f6:	12 c0       	rjmp	.+36     	; 0x1a1c <EXTI_u8IntDisable+0x6a>
	case INT1: CLR_BIT(GICR,GICR_INT1); break;
    19f8:	ab e5       	ldi	r26, 0x5B	; 91
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	eb e5       	ldi	r30, 0x5B	; 91
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	8f 77       	andi	r24, 0x7F	; 127
    1a04:	8c 93       	st	X, r24
    1a06:	0a c0       	rjmp	.+20     	; 0x1a1c <EXTI_u8IntDisable+0x6a>
	case INT2: CLR_BIT(GICR,GICR_INT2); break;
    1a08:	ab e5       	ldi	r26, 0x5B	; 91
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	eb e5       	ldi	r30, 0x5B	; 91
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	8f 7d       	andi	r24, 0xDF	; 223
    1a14:	8c 93       	st	X, r24
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <EXTI_u8IntDisable+0x6a>
	default: Local_u8ErrorState	=NOK;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <EXTI_u8Int0SetCallBack>:

u8 EXTI_u8Int0SetCallBack(void (*Copy_pvInt0Func)(void))
{
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <EXTI_u8Int0SetCallBack+0x6>
    1a32:	0f 92       	push	r0
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	9b 83       	std	Y+3, r25	; 0x03
    1a3a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    1a3c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt0Func != NULL)
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	9b 81       	ldd	r25, Y+3	; 0x03
    1a42:	00 97       	sbiw	r24, 0x00	; 0
    1a44:	39 f0       	breq	.+14     	; 0x1a54 <EXTI_u8Int0SetCallBack+0x28>
	{
		EXTI_pvInt0Func= Copy_pvInt0Func;
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	9b 81       	ldd	r25, Y+3	; 0x03
    1a4a:	90 93 69 00 	sts	0x0069, r25
    1a4e:	80 93 68 00 	sts	0x0068, r24
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <EXTI_u8Int0SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus= NULL_POINTER;
    1a54:	82 e0       	ldi	r24, 0x02	; 2
    1a56:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus;
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	08 95       	ret

00001a66 <EXTI_u8Int1SetCallBack>:

u8 EXTI_u8Int1SetCallBack(void (*Copy_pvInt1Func)(void))
{
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <EXTI_u8Int1SetCallBack+0x6>
    1a6c:	0f 92       	push	r0
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	9b 83       	std	Y+3, r25	; 0x03
    1a74:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    1a76:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt1Func != NULL)
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a7c:	00 97       	sbiw	r24, 0x00	; 0
    1a7e:	39 f0       	breq	.+14     	; 0x1a8e <EXTI_u8Int1SetCallBack+0x28>
	{
		EXTI_pvInt1Func= Copy_pvInt1Func;
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	9b 81       	ldd	r25, Y+3	; 0x03
    1a84:	90 93 6b 00 	sts	0x006B, r25
    1a88:	80 93 6a 00 	sts	0x006A, r24
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <EXTI_u8Int1SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus= NULL_POINTER;
    1a8e:	82 e0       	ldi	r24, 0x02	; 2
    1a90:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus;
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <EXTI_u8Int2SetCallBack>:

u8 EXTI_u8Int2SetCallBack(void (*Copy_pvInt2Func)(void))
{
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <EXTI_u8Int2SetCallBack+0x6>
    1aa6:	0f 92       	push	r0
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
    1aac:	9b 83       	std	Y+3, r25	; 0x03
    1aae:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    1ab0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt2Func != NULL)
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	39 f0       	breq	.+14     	; 0x1ac8 <EXTI_u8Int2SetCallBack+0x28>
	{
		EXTI_pvInt2Func= Copy_pvInt2Func;
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	9b 81       	ldd	r25, Y+3	; 0x03
    1abe:	90 93 6d 00 	sts	0x006D, r25
    1ac2:	80 93 6c 00 	sts	0x006C, r24
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <EXTI_u8Int2SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus= NULL_POINTER;
    1ac8:	82 e0       	ldi	r24, 0x02	; 2
    1aca:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus;
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <__vector_1>:

/*ISR of INT0*/
void __vector_1 (void)  __attribute__((signal));
void __vector_1 (void)
{
    1ada:	1f 92       	push	r1
    1adc:	0f 92       	push	r0
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	0f 92       	push	r0
    1ae2:	11 24       	eor	r1, r1
    1ae4:	2f 93       	push	r18
    1ae6:	3f 93       	push	r19
    1ae8:	4f 93       	push	r20
    1aea:	5f 93       	push	r21
    1aec:	6f 93       	push	r22
    1aee:	7f 93       	push	r23
    1af0:	8f 93       	push	r24
    1af2:	9f 93       	push	r25
    1af4:	af 93       	push	r26
    1af6:	bf 93       	push	r27
    1af8:	ef 93       	push	r30
    1afa:	ff 93       	push	r31
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt0Func != NULL)
    1b04:	80 91 68 00 	lds	r24, 0x0068
    1b08:	90 91 69 00 	lds	r25, 0x0069
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	29 f0       	breq	.+10     	; 0x1b1a <__vector_1+0x40>
	{
		EXTI_pvInt0Func();
    1b10:	e0 91 68 00 	lds	r30, 0x0068
    1b14:	f0 91 69 00 	lds	r31, 0x0069
    1b18:	09 95       	icall
	}
	else
	{

	}
}
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	ff 91       	pop	r31
    1b20:	ef 91       	pop	r30
    1b22:	bf 91       	pop	r27
    1b24:	af 91       	pop	r26
    1b26:	9f 91       	pop	r25
    1b28:	8f 91       	pop	r24
    1b2a:	7f 91       	pop	r23
    1b2c:	6f 91       	pop	r22
    1b2e:	5f 91       	pop	r21
    1b30:	4f 91       	pop	r20
    1b32:	3f 91       	pop	r19
    1b34:	2f 91       	pop	r18
    1b36:	0f 90       	pop	r0
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	0f 90       	pop	r0
    1b3c:	1f 90       	pop	r1
    1b3e:	18 95       	reti

00001b40 <__vector_3>:
/*ISR of INT1*/

/*ISR of INT2*/
void __vector_3 (void)  __attribute__((signal));
void __vector_3 (void)
{
    1b40:	1f 92       	push	r1
    1b42:	0f 92       	push	r0
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	0f 92       	push	r0
    1b48:	11 24       	eor	r1, r1
    1b4a:	2f 93       	push	r18
    1b4c:	3f 93       	push	r19
    1b4e:	4f 93       	push	r20
    1b50:	5f 93       	push	r21
    1b52:	6f 93       	push	r22
    1b54:	7f 93       	push	r23
    1b56:	8f 93       	push	r24
    1b58:	9f 93       	push	r25
    1b5a:	af 93       	push	r26
    1b5c:	bf 93       	push	r27
    1b5e:	ef 93       	push	r30
    1b60:	ff 93       	push	r31
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt2Func != NULL)
    1b6a:	80 91 6c 00 	lds	r24, 0x006C
    1b6e:	90 91 6d 00 	lds	r25, 0x006D
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	29 f0       	breq	.+10     	; 0x1b80 <__vector_3+0x40>
	{
		EXTI_pvInt2Func();
    1b76:	e0 91 6c 00 	lds	r30, 0x006C
    1b7a:	f0 91 6d 00 	lds	r31, 0x006D
    1b7e:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    1b80:	cf 91       	pop	r28
    1b82:	df 91       	pop	r29
    1b84:	ff 91       	pop	r31
    1b86:	ef 91       	pop	r30
    1b88:	bf 91       	pop	r27
    1b8a:	af 91       	pop	r26
    1b8c:	9f 91       	pop	r25
    1b8e:	8f 91       	pop	r24
    1b90:	7f 91       	pop	r23
    1b92:	6f 91       	pop	r22
    1b94:	5f 91       	pop	r21
    1b96:	4f 91       	pop	r20
    1b98:	3f 91       	pop	r19
    1b9a:	2f 91       	pop	r18
    1b9c:	0f 90       	pop	r0
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	0f 90       	pop	r0
    1ba2:	1f 90       	pop	r1
    1ba4:	18 95       	reti

00001ba6 <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1bae:	af e5       	ldi	r26, 0x5F	; 95
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	ef e5       	ldi	r30, 0x5F	; 95
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	80 68       	ori	r24, 0x80	; 128
    1bba:	8c 93       	st	X, r24
}
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	08 95       	ret

00001bc2 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1bca:	af e5       	ldi	r26, 0x5F	; 95
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	ef e5       	ldi	r30, 0x5F	; 95
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	8f 77       	andi	r24, 0x7F	; 127
    1bd6:	8c 93       	st	X, r24
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <Map>:

#include "MAP_config.h"
#include "MAP_private.h"
#include "MAP_interface.h"
s32 Map(s32 Copy_s32InputMin , s32 Copy_s32InputMax , s32 Copy_s32OutputMin , s32 Copy_s32OutputMax , s32 Copy_s32InputVal)
{
    1bde:	af 92       	push	r10
    1be0:	bf 92       	push	r11
    1be2:	cf 92       	push	r12
    1be4:	df 92       	push	r13
    1be6:	ef 92       	push	r14
    1be8:	ff 92       	push	r15
    1bea:	0f 93       	push	r16
    1bec:	1f 93       	push	r17
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
    1bf6:	64 97       	sbiw	r28, 0x14	; 20
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	f8 94       	cli
    1bfc:	de bf       	out	0x3e, r29	; 62
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	cd bf       	out	0x3d, r28	; 61
    1c02:	6d 83       	std	Y+5, r22	; 0x05
    1c04:	7e 83       	std	Y+6, r23	; 0x06
    1c06:	8f 83       	std	Y+7, r24	; 0x07
    1c08:	98 87       	std	Y+8, r25	; 0x08
    1c0a:	29 87       	std	Y+9, r18	; 0x09
    1c0c:	3a 87       	std	Y+10, r19	; 0x0a
    1c0e:	4b 87       	std	Y+11, r20	; 0x0b
    1c10:	5c 87       	std	Y+12, r21	; 0x0c
    1c12:	ed 86       	std	Y+13, r14	; 0x0d
    1c14:	fe 86       	std	Y+14, r15	; 0x0e
    1c16:	0f 87       	std	Y+15, r16	; 0x0f
    1c18:	18 8b       	std	Y+16, r17	; 0x10
    1c1a:	a9 8a       	std	Y+17, r10	; 0x11
    1c1c:	ba 8a       	std	Y+18, r11	; 0x12
    1c1e:	cb 8a       	std	Y+19, r12	; 0x13
    1c20:	dc 8a       	std	Y+20, r13	; 0x14
	s32 Loacl_s32Value = Copy_s32InputVal - Copy_s32InputMin;
    1c22:	29 a1       	ldd	r18, Y+33	; 0x21
    1c24:	3a a1       	ldd	r19, Y+34	; 0x22
    1c26:	4b a1       	ldd	r20, Y+35	; 0x23
    1c28:	5c a1       	ldd	r21, Y+36	; 0x24
    1c2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2e:	af 81       	ldd	r26, Y+7	; 0x07
    1c30:	b8 85       	ldd	r27, Y+8	; 0x08
    1c32:	79 01       	movw	r14, r18
    1c34:	8a 01       	movw	r16, r20
    1c36:	e8 1a       	sub	r14, r24
    1c38:	f9 0a       	sbc	r15, r25
    1c3a:	0a 0b       	sbc	r16, r26
    1c3c:	1b 0b       	sbc	r17, r27
    1c3e:	d8 01       	movw	r26, r16
    1c40:	c7 01       	movw	r24, r14
    1c42:	89 83       	std	Y+1, r24	; 0x01
    1c44:	9a 83       	std	Y+2, r25	; 0x02
    1c46:	ab 83       	std	Y+3, r26	; 0x03
    1c48:	bc 83       	std	Y+4, r27	; 0x04
	Loacl_s32Value = Loacl_s32Value * (Copy_s32OutputMax - Copy_s32OutputMin);
    1c4a:	29 89       	ldd	r18, Y+17	; 0x11
    1c4c:	3a 89       	ldd	r19, Y+18	; 0x12
    1c4e:	4b 89       	ldd	r20, Y+19	; 0x13
    1c50:	5c 89       	ldd	r21, Y+20	; 0x14
    1c52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c56:	af 85       	ldd	r26, Y+15	; 0x0f
    1c58:	b8 89       	ldd	r27, Y+16	; 0x10
    1c5a:	28 1b       	sub	r18, r24
    1c5c:	39 0b       	sbc	r19, r25
    1c5e:	4a 0b       	sbc	r20, r26
    1c60:	5b 0b       	sbc	r21, r27
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	9a 81       	ldd	r25, Y+2	; 0x02
    1c66:	ab 81       	ldd	r26, Y+3	; 0x03
    1c68:	bc 81       	ldd	r27, Y+4	; 0x04
    1c6a:	bc 01       	movw	r22, r24
    1c6c:	cd 01       	movw	r24, r26
    1c6e:	0e 94 43 18 	call	0x3086	; 0x3086 <__mulsi3>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	9a 83       	std	Y+2, r25	; 0x02
    1c7a:	ab 83       	std	Y+3, r26	; 0x03
    1c7c:	bc 83       	std	Y+4, r27	; 0x04
	Loacl_s32Value = Loacl_s32Value / (Copy_s32InputMax - Copy_s32InputMin);
    1c7e:	29 85       	ldd	r18, Y+9	; 0x09
    1c80:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c82:	4b 85       	ldd	r20, Y+11	; 0x0b
    1c84:	5c 85       	ldd	r21, Y+12	; 0x0c
    1c86:	8d 81       	ldd	r24, Y+5	; 0x05
    1c88:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8a:	af 81       	ldd	r26, Y+7	; 0x07
    1c8c:	b8 85       	ldd	r27, Y+8	; 0x08
    1c8e:	28 1b       	sub	r18, r24
    1c90:	39 0b       	sbc	r19, r25
    1c92:	4a 0b       	sbc	r20, r26
    1c94:	5b 0b       	sbc	r21, r27
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9a:	ab 81       	ldd	r26, Y+3	; 0x03
    1c9c:	bc 81       	ldd	r27, Y+4	; 0x04
    1c9e:	bc 01       	movw	r22, r24
    1ca0:	cd 01       	movw	r24, r26
    1ca2:	0e 94 84 18 	call	0x3108	; 0x3108 <__divmodsi4>
    1ca6:	da 01       	movw	r26, r20
    1ca8:	c9 01       	movw	r24, r18
    1caa:	89 83       	std	Y+1, r24	; 0x01
    1cac:	9a 83       	std	Y+2, r25	; 0x02
    1cae:	ab 83       	std	Y+3, r26	; 0x03
    1cb0:	bc 83       	std	Y+4, r27	; 0x04
	Loacl_s32Value = Loacl_s32Value + Copy_s32OutputMin;
    1cb2:	29 81       	ldd	r18, Y+1	; 0x01
    1cb4:	3a 81       	ldd	r19, Y+2	; 0x02
    1cb6:	4b 81       	ldd	r20, Y+3	; 0x03
    1cb8:	5c 81       	ldd	r21, Y+4	; 0x04
    1cba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cbe:	af 85       	ldd	r26, Y+15	; 0x0f
    1cc0:	b8 89       	ldd	r27, Y+16	; 0x10
    1cc2:	82 0f       	add	r24, r18
    1cc4:	93 1f       	adc	r25, r19
    1cc6:	a4 1f       	adc	r26, r20
    1cc8:	b5 1f       	adc	r27, r21
    1cca:	89 83       	std	Y+1, r24	; 0x01
    1ccc:	9a 83       	std	Y+2, r25	; 0x02
    1cce:	ab 83       	std	Y+3, r26	; 0x03
    1cd0:	bc 83       	std	Y+4, r27	; 0x04
	return Loacl_s32Value;
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd6:	ab 81       	ldd	r26, Y+3	; 0x03
    1cd8:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1cda:	bc 01       	movw	r22, r24
    1cdc:	cd 01       	movw	r24, r26
    1cde:	64 96       	adiw	r28, 0x14	; 20
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	1f 91       	pop	r17
    1cf0:	0f 91       	pop	r16
    1cf2:	ff 90       	pop	r15
    1cf4:	ef 90       	pop	r14
    1cf6:	df 90       	pop	r13
    1cf8:	cf 90       	pop	r12
    1cfa:	bf 90       	pop	r11
    1cfc:	af 90       	pop	r10
    1cfe:	08 95       	ret

00001d00 <SVM_voidServoInit>:
#include "MAP_interface.h"
#include "DIO_interface.h"
#include "TIMER_interface.h"

void SVM_voidServoInit(void)
{
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN4,DIO_u8PIN_OUTPUT);
    1d08:	83 e0       	ldi	r24, 0x03	; 3
    1d0a:	64 e0       	ldi	r22, 0x04	; 4
    1d0c:	41 e0       	ldi	r20, 0x01	; 1
    1d0e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN5,DIO_u8PIN_OUTPUT);
    1d12:	83 e0       	ldi	r24, 0x03	; 3
    1d14:	65 e0       	ldi	r22, 0x05	; 5
    1d16:	41 e0       	ldi	r20, 0x01	; 1
    1d18:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	TIMER1_voidInit();
    1d1c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <TIMER1_voidInit>
	Timer1_voidSetICRValue(20000);
    1d20:	80 e2       	ldi	r24, 0x20	; 32
    1d22:	9e e4       	ldi	r25, 0x4E	; 78
    1d24:	0e 94 0b 10 	call	0x2016	; 0x2016 <Timer1_voidSetICRValue>
}
    1d28:	cf 91       	pop	r28
    1d2a:	df 91       	pop	r29
    1d2c:	08 95       	ret

00001d2e <SVM_voidSetAngle1>:
void SVM_voidSetAngle1(u8 Copy_u8SetAngle1)
{
    1d2e:	af 92       	push	r10
    1d30:	bf 92       	push	r11
    1d32:	cf 92       	push	r12
    1d34:	df 92       	push	r13
    1d36:	ef 92       	push	r14
    1d38:	ff 92       	push	r15
    1d3a:	0f 93       	push	r16
    1d3c:	1f 93       	push	r17
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <SVM_voidSetAngle1+0x16>
    1d44:	0f 92       	push	r0
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16Value = Map(0,180,540,1540,Copy_u8SetAngle1);
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	88 2f       	mov	r24, r24
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	a0 e0       	ldi	r26, 0x00	; 0
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	00 d0       	rcall	.+0      	; 0x1d58 <SVM_voidSetAngle1+0x2a>
    1d58:	00 d0       	rcall	.+0      	; 0x1d5a <SVM_voidSetAngle1+0x2c>
    1d5a:	ed b7       	in	r30, 0x3d	; 61
    1d5c:	fe b7       	in	r31, 0x3e	; 62
    1d5e:	31 96       	adiw	r30, 0x01	; 1
    1d60:	80 83       	st	Z, r24
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	a2 83       	std	Z+2, r26	; 0x02
    1d66:	b3 83       	std	Z+3, r27	; 0x03
    1d68:	60 e0       	ldi	r22, 0x00	; 0
    1d6a:	70 e0       	ldi	r23, 0x00	; 0
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	24 eb       	ldi	r18, 0xB4	; 180
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e0       	ldi	r20, 0x00	; 0
    1d76:	50 e0       	ldi	r21, 0x00	; 0
    1d78:	0f 2e       	mov	r0, r31
    1d7a:	fc e1       	ldi	r31, 0x1C	; 28
    1d7c:	ef 2e       	mov	r14, r31
    1d7e:	f2 e0       	ldi	r31, 0x02	; 2
    1d80:	ff 2e       	mov	r15, r31
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	0f 2f       	mov	r16, r31
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	1f 2f       	mov	r17, r31
    1d8a:	f0 2d       	mov	r31, r0
    1d8c:	0f 2e       	mov	r0, r31
    1d8e:	f4 e0       	ldi	r31, 0x04	; 4
    1d90:	af 2e       	mov	r10, r31
    1d92:	f6 e0       	ldi	r31, 0x06	; 6
    1d94:	bf 2e       	mov	r11, r31
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	cf 2e       	mov	r12, r31
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	df 2e       	mov	r13, r31
    1d9e:	f0 2d       	mov	r31, r0
    1da0:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <Map>
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	9a 83       	std	Y+2, r25	; 0x02
    1db2:	89 83       	std	Y+1, r24	; 0x01
	Timer1_voidSetChannelACompMatchValue(Local_u16Value);
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	9a 81       	ldd	r25, Y+2	; 0x02
    1db8:	0e 94 1d 10 	call	0x203a	; 0x203a <Timer1_voidSetChannelACompMatchValue>
}
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	0f 90       	pop	r0
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	1f 91       	pop	r17
    1dc8:	0f 91       	pop	r16
    1dca:	ff 90       	pop	r15
    1dcc:	ef 90       	pop	r14
    1dce:	df 90       	pop	r13
    1dd0:	cf 90       	pop	r12
    1dd2:	bf 90       	pop	r11
    1dd4:	af 90       	pop	r10
    1dd6:	08 95       	ret

00001dd8 <SVM_voidSetAngle2>:
void SVM_voidSetAngle2(u8 Copy_u8SetAngle2)
{
    1dd8:	af 92       	push	r10
    1dda:	bf 92       	push	r11
    1ddc:	cf 92       	push	r12
    1dde:	df 92       	push	r13
    1de0:	ef 92       	push	r14
    1de2:	ff 92       	push	r15
    1de4:	0f 93       	push	r16
    1de6:	1f 93       	push	r17
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	00 d0       	rcall	.+0      	; 0x1dee <SVM_voidSetAngle2+0x16>
    1dee:	0f 92       	push	r0
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16Value = Map(0,180,540,1540,Copy_u8SetAngle2);
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	88 2f       	mov	r24, r24
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	a0 e0       	ldi	r26, 0x00	; 0
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <SVM_voidSetAngle2+0x2a>
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <SVM_voidSetAngle2+0x2c>
    1e04:	ed b7       	in	r30, 0x3d	; 61
    1e06:	fe b7       	in	r31, 0x3e	; 62
    1e08:	31 96       	adiw	r30, 0x01	; 1
    1e0a:	80 83       	st	Z, r24
    1e0c:	91 83       	std	Z+1, r25	; 0x01
    1e0e:	a2 83       	std	Z+2, r26	; 0x02
    1e10:	b3 83       	std	Z+3, r27	; 0x03
    1e12:	60 e0       	ldi	r22, 0x00	; 0
    1e14:	70 e0       	ldi	r23, 0x00	; 0
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	24 eb       	ldi	r18, 0xB4	; 180
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	40 e0       	ldi	r20, 0x00	; 0
    1e20:	50 e0       	ldi	r21, 0x00	; 0
    1e22:	0f 2e       	mov	r0, r31
    1e24:	fc e1       	ldi	r31, 0x1C	; 28
    1e26:	ef 2e       	mov	r14, r31
    1e28:	f2 e0       	ldi	r31, 0x02	; 2
    1e2a:	ff 2e       	mov	r15, r31
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	0f 2f       	mov	r16, r31
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	1f 2f       	mov	r17, r31
    1e34:	f0 2d       	mov	r31, r0
    1e36:	0f 2e       	mov	r0, r31
    1e38:	f4 e0       	ldi	r31, 0x04	; 4
    1e3a:	af 2e       	mov	r10, r31
    1e3c:	f6 e0       	ldi	r31, 0x06	; 6
    1e3e:	bf 2e       	mov	r11, r31
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	cf 2e       	mov	r12, r31
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	df 2e       	mov	r13, r31
    1e48:	f0 2d       	mov	r31, r0
    1e4a:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <Map>
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	9a 83       	std	Y+2, r25	; 0x02
    1e5c:	89 83       	std	Y+1, r24	; 0x01
	Timer1_voidSetChannelBCompMatchValue(Local_u16Value);
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	9a 81       	ldd	r25, Y+2	; 0x02
    1e62:	0e 94 2f 10 	call	0x205e	; 0x205e <Timer1_voidSetChannelBCompMatchValue>
}
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	1f 91       	pop	r17
    1e72:	0f 91       	pop	r16
    1e74:	ff 90       	pop	r15
    1e76:	ef 90       	pop	r14
    1e78:	df 90       	pop	r13
    1e7a:	cf 90       	pop	r12
    1e7c:	bf 90       	pop	r11
    1e7e:	af 90       	pop	r10
    1e80:	08 95       	ret

00001e82 <TIMER0_voidInit>:
static void (*TIMER0_pvCallBackFunc)(void) = NULL;

static void(*ICU_pvCallBackFunc)(void) = NULL;

void TIMER0_voidInit(void)
{
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_OCIE0);



#elif TIMER_SelectMode == Timer_FastPWMMode
	SET_BIT(TCCR0,TCCR0_WGM00);
    1e8a:	a3 e5       	ldi	r26, 0x53	; 83
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	e3 e5       	ldi	r30, 0x53	; 83
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	80 64       	ori	r24, 0x40	; 64
    1e96:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    1e98:	a3 e5       	ldi	r26, 0x53	; 83
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e3 e5       	ldi	r30, 0x53	; 83
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	88 60       	ori	r24, 0x08	; 8
    1ea4:	8c 93       	st	X, r24

	/*SET on Top, Clear on Compare*/
	SET_BIT(TCCR0,5);
    1ea6:	a3 e5       	ldi	r26, 0x53	; 83
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e3 e5       	ldi	r30, 0x53	; 83
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	80 62       	ori	r24, 0x20	; 32
    1eb2:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,4);
    1eb4:	a3 e5       	ldi	r26, 0x53	; 83
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e3 e5       	ldi	r30, 0x53	; 83
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	8f 7e       	andi	r24, 0xEF	; 239
    1ec0:	8c 93       	st	X, r24
#else
#error "Wrong Select Mode"
#endif

	/*Set compare match value to 64 For Duty Cycle 25%*/
	OCR0 = 64;
    1ec2:	ec e5       	ldi	r30, 0x5C	; 92
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 e4       	ldi	r24, 0x40	; 64
    1ec8:	80 83       	st	Z, r24


	/*Set Timer : Prescaler Division by 8*/
	CLR_BIT(TCCR0,TCCR0_CS00);
    1eca:	a3 e5       	ldi	r26, 0x53	; 83
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e3 e5       	ldi	r30, 0x53	; 83
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	8e 7f       	andi	r24, 0xFE	; 254
    1ed6:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    1ed8:	a3 e5       	ldi	r26, 0x53	; 83
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	e3 e5       	ldi	r30, 0x53	; 83
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	82 60       	ori	r24, 0x02	; 2
    1ee4:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    1ee6:	a3 e5       	ldi	r26, 0x53	; 83
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e3 e5       	ldi	r30, 0x53	; 83
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	8b 7f       	andi	r24, 0xFB	; 251
    1ef2:	8c 93       	st	X, r24
}
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <Timer0_voidSetCompMatchValue>:

void Timer0_voidSetCompMatchValue(u8 Copy_u8value)
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	0f 92       	push	r0
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8value;
    1f06:	ec e5       	ldi	r30, 0x5C	; 92
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	80 83       	st	Z, r24
}
    1f0e:	0f 90       	pop	r0
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	08 95       	ret

00001f16 <TIMER0_u8SetCallBack>:
u8 TIMER0_u8SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <TIMER0_u8SetCallBack+0x6>
    1f1c:	0f 92       	push	r0
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
    1f22:	9b 83       	std	Y+3, r25	; 0x03
    1f24:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
    1f26:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc != NULL)
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	39 f0       	breq	.+14     	; 0x1f3e <TIMER0_u8SetCallBack+0x28>
	{
		TIMER0_pvCallBackFunc = Copy_pvCallBackFunc;
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	9b 81       	ldd	r25, Y+3	; 0x03
    1f34:	90 93 6f 00 	sts	0x006F, r25
    1f38:	80 93 6e 00 	sts	0x006E, r24
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <TIMER0_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus = NULL_POINTER;
    1f3e:	82 e0       	ldi	r24, 0x02	; 2
    1f40:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <TIMER1_voidInit>:




void TIMER1_voidInit(void)
{
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
	/*Normal Mode , Default*/
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1f58:	af e4       	ldi	r26, 0x4F	; 79
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	ef e4       	ldi	r30, 0x4F	; 79
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	80 68       	ori	r24, 0x80	; 128
    1f64:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    1f66:	af e4       	ldi	r26, 0x4F	; 79
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	ef e4       	ldi	r30, 0x4F	; 79
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	8f 7b       	andi	r24, 0xBF	; 191
    1f72:	8c 93       	st	X, r24

	/*Waveform Generation Mode, Fast PWM ICR1*/ //Default Normal
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1f74:	af e4       	ldi	r26, 0x4F	; 79
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	ef e4       	ldi	r30, 0x4F	; 79
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	8e 7f       	andi	r24, 0xFE	; 254
    1f80:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    1f82:	af e4       	ldi	r26, 0x4F	; 79
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	ef e4       	ldi	r30, 0x4F	; 79
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	82 60       	ori	r24, 0x02	; 2
    1f8e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    1f90:	ae e4       	ldi	r26, 0x4E	; 78
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	ee e4       	ldi	r30, 0x4E	; 78
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	88 60       	ori	r24, 0x08	; 8
    1f9c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    1f9e:	ae e4       	ldi	r26, 0x4E	; 78
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	ee e4       	ldi	r30, 0x4E	; 78
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	80 61       	ori	r24, 0x10	; 16
    1faa:	8c 93       	st	X, r24

	/*Set prescaler Division by 8*/
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    1fac:	ae e4       	ldi	r26, 0x4E	; 78
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	ee e4       	ldi	r30, 0x4E	; 78
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	8e 7f       	andi	r24, 0xFE	; 254
    1fb8:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    1fba:	ae e4       	ldi	r26, 0x4E	; 78
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	ee e4       	ldi	r30, 0x4E	; 78
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	82 60       	ori	r24, 0x02	; 2
    1fc6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    1fc8:	ae e4       	ldi	r26, 0x4E	; 78
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	ee e4       	ldi	r30, 0x4E	; 78
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	8b 7f       	andi	r24, 0xFB	; 251
    1fd4:	8c 93       	st	X, r24
}
    1fd6:	cf 91       	pop	r28
    1fd8:	df 91       	pop	r29
    1fda:	08 95       	ret

00001fdc <Timer1_voidSetTimerValue>:

void Timer1_voidSetTimerValue(u16 Copy_u16Value)
{
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	00 d0       	rcall	.+0      	; 0x1fe2 <Timer1_voidSetTimerValue+0x6>
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
    1fe6:	9a 83       	std	Y+2, r25	; 0x02
    1fe8:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Value;
    1fea:	ec e4       	ldi	r30, 0x4C	; 76
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff2:	91 83       	std	Z+1, r25	; 0x01
    1ff4:	80 83       	st	Z, r24
}
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	08 95       	ret

00002000 <Timer1_voidReadTimerValue>:

u16 Timer1_voidReadTimerValue(void)
{
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    2008:	ec e4       	ldi	r30, 0x4C	; 76
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	91 81       	ldd	r25, Z+1	; 0x01
}
    2010:	cf 91       	pop	r28
    2012:	df 91       	pop	r29
    2014:	08 95       	ret

00002016 <Timer1_voidSetICRValue>:
void Timer1_voidSetICRValue(u16 Copy_u8value)
{
    2016:	df 93       	push	r29
    2018:	cf 93       	push	r28
    201a:	00 d0       	rcall	.+0      	; 0x201c <Timer1_voidSetICRValue+0x6>
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u8value;
    2024:	e6 e4       	ldi	r30, 0x46	; 70
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	9a 81       	ldd	r25, Y+2	; 0x02
    202c:	91 83       	std	Z+1, r25	; 0x01
    202e:	80 83       	st	Z, r24
}
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	08 95       	ret

0000203a <Timer1_voidSetChannelACompMatchValue>:
void Timer1_voidSetChannelACompMatchValue(u16 Copy_u8value)
{
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	00 d0       	rcall	.+0      	; 0x2040 <Timer1_voidSetChannelACompMatchValue+0x6>
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	9a 83       	std	Y+2, r25	; 0x02
    2046:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u8value;
    2048:	ea e4       	ldi	r30, 0x4A	; 74
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	9a 81       	ldd	r25, Y+2	; 0x02
    2050:	91 83       	std	Z+1, r25	; 0x01
    2052:	80 83       	st	Z, r24
}
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <Timer1_voidSetChannelBCompMatchValue>:
void Timer1_voidSetChannelBCompMatchValue(u16 Copy_u8value)
{
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	00 d0       	rcall	.+0      	; 0x2064 <Timer1_voidSetChannelBCompMatchValue+0x6>
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	9a 83       	std	Y+2, r25	; 0x02
    206a:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u8value;
    206c:	e8 e4       	ldi	r30, 0x48	; 72
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	9a 81       	ldd	r25, Y+2	; 0x02
    2074:	91 83       	std	Z+1, r25	; 0x01
    2076:	80 83       	st	Z, r24
}
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	08 95       	ret

00002082 <ICU_voidInit>:




void ICU_voidInit(void)
{
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
	/*Set trigger source to rising edge initially*/
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    208a:	ae e4       	ldi	r26, 0x4E	; 78
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	ee e4       	ldi	r30, 0x4E	; 78
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	80 64       	ori	r24, 0x40	; 64
    2096:	8c 93       	st	X, r24

	/*Enable input capture interrupt*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    2098:	a9 e5       	ldi	r26, 0x59	; 89
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e9 e5       	ldi	r30, 0x59	; 89
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	80 62       	ori	r24, 0x20	; 32
    20a4:	8c 93       	st	X, r24
}
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <ICI_u8SetTriggerEdge>:

u8 ICI_u8SetTriggerEdge(u8 Copyu8Edge)
{
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <ICI_u8SetTriggerEdge+0x6>
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
    20b8:	19 82       	std	Y+1, r1	; 0x01
	if(Copyu8Edge == ICU_RISING_EDGE)
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	81 30       	cpi	r24, 0x01	; 1
    20be:	41 f4       	brne	.+16     	; 0x20d0 <ICI_u8SetTriggerEdge+0x24>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    20c0:	ae e4       	ldi	r26, 0x4E	; 78
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	ee e4       	ldi	r30, 0x4E	; 78
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	80 64       	ori	r24, 0x40	; 64
    20cc:	8c 93       	st	X, r24
    20ce:	0d c0       	rjmp	.+26     	; 0x20ea <ICI_u8SetTriggerEdge+0x3e>
	}
	else if(Copyu8Edge == ICU_FALLING_EDGE)
    20d0:	8a 81       	ldd	r24, Y+2	; 0x02
    20d2:	88 23       	and	r24, r24
    20d4:	41 f4       	brne	.+16     	; 0x20e6 <ICI_u8SetTriggerEdge+0x3a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    20d6:	ae e4       	ldi	r26, 0x4E	; 78
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	ee e4       	ldi	r30, 0x4E	; 78
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	8f 7b       	andi	r24, 0xBF	; 191
    20e2:	8c 93       	st	X, r24
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <ICI_u8SetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus = NOK;
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	08 95       	ret

000020f6 <ICU_voidEnableInterrupt>:

void ICU_voidEnableInterrupt(void)
{
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    20fe:	a9 e5       	ldi	r26, 0x59	; 89
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e9 e5       	ldi	r30, 0x59	; 89
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	80 62       	ori	r24, 0x20	; 32
    210a:	8c 93       	st	X, r24
}
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	08 95       	ret

00002112 <ICU_voidDisableInterrupt>:

void ICU_voidDisableInterrupt(void)
{
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    211a:	a9 e5       	ldi	r26, 0x59	; 89
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	e9 e5       	ldi	r30, 0x59	; 89
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	8f 7d       	andi	r24, 0xDF	; 223
    2126:	8c 93       	st	X, r24
}
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	08 95       	ret

0000212e <ICU_u16ReadInputCapture>:

u16 ICU_u16ReadInputCapture(void)
{
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    2136:	e6 e4       	ldi	r30, 0x46	; 70
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	91 81       	ldd	r25, Z+1	; 0x01
}
    213e:	cf 91       	pop	r28
    2140:	df 91       	pop	r29
    2142:	08 95       	ret

00002144 <ICU_u8SetCallBack>:

u8 ICU_u8SetCallBack(void (*Copy_puCallBackFunc))
{
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	00 d0       	rcall	.+0      	; 0x214a <ICU_u8SetCallBack+0x6>
    214a:	0f 92       	push	r0
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
    2150:	9b 83       	std	Y+3, r25	; 0x03
    2152:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
    2154:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_puCallBackFunc != NULL)
    2156:	8a 81       	ldd	r24, Y+2	; 0x02
    2158:	9b 81       	ldd	r25, Y+3	; 0x03
    215a:	00 97       	sbiw	r24, 0x00	; 0
    215c:	39 f0       	breq	.+14     	; 0x216c <ICU_u8SetCallBack+0x28>
	{
		ICU_pvCallBackFunc = Copy_puCallBackFunc;
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	9b 81       	ldd	r25, Y+3	; 0x03
    2162:	90 93 71 00 	sts	0x0071, r25
    2166:	80 93 70 00 	sts	0x0070, r24
    216a:	02 c0       	rjmp	.+4      	; 0x2170 <ICU_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus = NULL_POINTER;
    216c:	82 e0       	ldi	r24, 0x02	; 2
    216e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus;
    2170:	89 81       	ldd	r24, Y+1	; 0x01
}
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	cf 91       	pop	r28
    217a:	df 91       	pop	r29
    217c:	08 95       	ret

0000217e <__vector_10>:



void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    217e:	1f 92       	push	r1
    2180:	0f 92       	push	r0
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	0f 92       	push	r0
    2186:	11 24       	eor	r1, r1
    2188:	2f 93       	push	r18
    218a:	3f 93       	push	r19
    218c:	4f 93       	push	r20
    218e:	5f 93       	push	r21
    2190:	6f 93       	push	r22
    2192:	7f 93       	push	r23
    2194:	8f 93       	push	r24
    2196:	9f 93       	push	r25
    2198:	af 93       	push	r26
    219a:	bf 93       	push	r27
    219c:	ef 93       	push	r30
    219e:	ff 93       	push	r31
    21a0:	df 93       	push	r29
    21a2:	cf 93       	push	r28
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc != NULL)
    21a8:	80 91 6e 00 	lds	r24, 0x006E
    21ac:	90 91 6f 00 	lds	r25, 0x006F
    21b0:	00 97       	sbiw	r24, 0x00	; 0
    21b2:	29 f0       	breq	.+10     	; 0x21be <__vector_10+0x40>
	{
		TIMER0_pvCallBackFunc();
    21b4:	e0 91 6e 00 	lds	r30, 0x006E
    21b8:	f0 91 6f 00 	lds	r31, 0x006F
    21bc:	09 95       	icall
	}
}
    21be:	cf 91       	pop	r28
    21c0:	df 91       	pop	r29
    21c2:	ff 91       	pop	r31
    21c4:	ef 91       	pop	r30
    21c6:	bf 91       	pop	r27
    21c8:	af 91       	pop	r26
    21ca:	9f 91       	pop	r25
    21cc:	8f 91       	pop	r24
    21ce:	7f 91       	pop	r23
    21d0:	6f 91       	pop	r22
    21d2:	5f 91       	pop	r21
    21d4:	4f 91       	pop	r20
    21d6:	3f 91       	pop	r19
    21d8:	2f 91       	pop	r18
    21da:	0f 90       	pop	r0
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	0f 90       	pop	r0
    21e0:	1f 90       	pop	r1
    21e2:	18 95       	reti

000021e4 <__vector_6>:

/*ICU ISR*/
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    21e4:	1f 92       	push	r1
    21e6:	0f 92       	push	r0
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	0f 92       	push	r0
    21ec:	11 24       	eor	r1, r1
    21ee:	2f 93       	push	r18
    21f0:	3f 93       	push	r19
    21f2:	4f 93       	push	r20
    21f4:	5f 93       	push	r21
    21f6:	6f 93       	push	r22
    21f8:	7f 93       	push	r23
    21fa:	8f 93       	push	r24
    21fc:	9f 93       	push	r25
    21fe:	af 93       	push	r26
    2200:	bf 93       	push	r27
    2202:	ef 93       	push	r30
    2204:	ff 93       	push	r31
    2206:	df 93       	push	r29
    2208:	cf 93       	push	r28
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
	if(ICU_pvCallBackFunc != NULL)
    220e:	80 91 70 00 	lds	r24, 0x0070
    2212:	90 91 71 00 	lds	r25, 0x0071
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	29 f0       	breq	.+10     	; 0x2224 <__vector_6+0x40>
	{
		ICU_pvCallBackFunc();
    221a:	e0 91 70 00 	lds	r30, 0x0070
    221e:	f0 91 71 00 	lds	r31, 0x0071
    2222:	09 95       	icall
	}
}
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	ff 91       	pop	r31
    222a:	ef 91       	pop	r30
    222c:	bf 91       	pop	r27
    222e:	af 91       	pop	r26
    2230:	9f 91       	pop	r25
    2232:	8f 91       	pop	r24
    2234:	7f 91       	pop	r23
    2236:	6f 91       	pop	r22
    2238:	5f 91       	pop	r21
    223a:	4f 91       	pop	r20
    223c:	3f 91       	pop	r19
    223e:	2f 91       	pop	r18
    2240:	0f 90       	pop	r0
    2242:	0f be       	out	0x3f, r0	; 63
    2244:	0f 90       	pop	r0
    2246:	1f 90       	pop	r1
    2248:	18 95       	reti

0000224a <USART_voidInit>:
static u8 * USART_RecievedData = NULL;
static u8 USART_BufferSize;
static u8 * USART_ReceivedBuffer = NULL;

void USART_voidInit(void)
{
    224a:	df 93       	push	r29
    224c:	cf 93       	push	r28
    224e:	0f 92       	push	r0
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8UCSRCValue = 0;
    2254:	19 82       	std	Y+1, r1	; 0x01

	/*SET Register UCSRC*/
	SET_BIT(Local_u8UCSRCValue,UCSRC_URSEL);
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	80 68       	ori	r24, 0x80	; 128
    225a:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRCValue,UCSRC_UCSZ0);
	SET_BIT(Local_u8UCSRCValue,UCSRC_UCSZ1);
	CLR_BIT(UCSRB,UCSRB_UCSZ2);

#elif USART_SetData == _8_bit
	SET_BIT(Local_u8UCSRCValue,UCSRC_UCSZ0);
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	82 60       	ori	r24, 0x02	; 2
    2260:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCValue,UCSRC_UCSZ1);
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	84 60       	ori	r24, 0x04	; 4
    2266:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
    2268:	aa e2       	ldi	r26, 0x2A	; 42
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	ea e2       	ldi	r30, 0x2A	; 42
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	8b 7f       	andi	r24, 0xFB	; 251
    2274:	8c 93       	st	X, r24
#error "Wrong Choice USART Character Size"
#endif

	/*USART Mode Select*/
#if USART_SelectMode == Asynchronous
	CLR_BIT(Local_u8UCSRCValue,UCSRC_UMSEL);
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	8f 7b       	andi	r24, 0xBF	; 191
    227a:	89 83       	std	Y+1, r24	; 0x01

	/*Select Speed*/
#if USART_SelectSpeed == NormalSpeed
	CLR_BIT(UCSRA,UCSRA_U2X);
    227c:	ab e2       	ldi	r26, 0x2B	; 43
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	eb e2       	ldi	r30, 0x2B	; 43
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	8d 7f       	andi	r24, 0xFD	; 253
    2288:	8c 93       	st	X, r24

	/*Set Baud Rate*/
	UBRRL = (u8)(((USART_OscillatorFrequency) / (16UL * USART_BaudRate)) - 1);
    228a:	e9 e2       	ldi	r30, 0x29	; 41
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	83 e3       	ldi	r24, 0x33	; 51
    2290:	80 83       	st	Z, r24
#error "Wrong Choice USART Mode Select"
#endif

	/*Select parity */
#if USART_SelectParity == Disabled
	CLR_BIT(Local_u8UCSRCValue,UCSRC_UPM0);
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	8f 7e       	andi	r24, 0xEF	; 239
    2296:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRCValue,UCSRC_UPM1);
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	8f 7d       	andi	r24, 0xDF	; 223
    229c:	89 83       	std	Y+1, r24	; 0x01
	/*Stop Bit Select*/
#if USART_StopBitSelect == _1_bit
	CLR_BIT(Local_u8UCSRCValue,UCSRC_USBS);

#elif USART_StopBitSelect == _2_bit
	SET_BIT(Local_u8UCSRCValue,UCSRC_USBS);
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	88 60       	ori	r24, 0x08	; 8
    22a2:	89 83       	std	Y+1, r24	; 0x01
#error "Wrong Choice USART Stop Bit Select"
#endif


	/*SET Value of UCSRC*/
	UCSRC = Local_u8UCSRCValue;
    22a4:	e0 e4       	ldi	r30, 0x40	; 64
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	80 83       	st	Z, r24


	/*Receiver Enable*/
	SET_BIT(UCSRB,UCSRB_RXEN);
    22ac:	aa e2       	ldi	r26, 0x2A	; 42
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	ea e2       	ldi	r30, 0x2A	; 42
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	80 61       	ori	r24, 0x10	; 16
    22b8:	8c 93       	st	X, r24

	/*Transmitter Enable*/
	SET_BIT(UCSRB,UCSRB_TXEN);
    22ba:	aa e2       	ldi	r26, 0x2A	; 42
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	ea e2       	ldi	r30, 0x2A	; 42
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	88 60       	ori	r24, 0x08	; 8
    22c6:	8c 93       	st	X, r24
}
    22c8:	0f 90       	pop	r0
    22ca:	cf 91       	pop	r28
    22cc:	df 91       	pop	r29
    22ce:	08 95       	ret

000022d0 <USART_voidSend>:

void USART_voidSend(u8 Copy_u8Data)
{
    22d0:	df 93       	push	r29
    22d2:	cf 93       	push	r28
    22d4:	0f 92       	push	r0
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
    22da:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,UCSRA_UDRE) == 0);
    22dc:	eb e2       	ldi	r30, 0x2B	; 43
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	82 95       	swap	r24
    22e4:	86 95       	lsr	r24
    22e6:	87 70       	andi	r24, 0x07	; 7
    22e8:	88 2f       	mov	r24, r24
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	81 70       	andi	r24, 0x01	; 1
    22ee:	90 70       	andi	r25, 0x00	; 0
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	a1 f3       	breq	.-24     	; 0x22dc <USART_voidSend+0xc>
	UDR = Copy_u8Data;
    22f4:	ec e2       	ldi	r30, 0x2C	; 44
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	80 83       	st	Z, r24


}
    22fc:	0f 90       	pop	r0
    22fe:	cf 91       	pop	r28
    2300:	df 91       	pop	r29
    2302:	08 95       	ret

00002304 <USART_voidSendCharSynch>:

u8 USART_voidSendCharSynch(u8 Copy_u8Data)
{
    2304:	df 93       	push	r29
    2306:	cf 93       	push	r28
    2308:	00 d0       	rcall	.+0      	; 0x230a <USART_voidSendCharSynch+0x6>
    230a:	00 d0       	rcall	.+0      	; 0x230c <USART_voidSendCharSynch+0x8>
    230c:	00 d0       	rcall	.+0      	; 0x230e <USART_voidSendCharSynch+0xa>
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	8e 83       	std	Y+6, r24	; 0x06
	u32 Local_u32Counter = 0;
    2314:	1a 82       	std	Y+2, r1	; 0x02
    2316:	1b 82       	std	Y+3, r1	; 0x03
    2318:	1c 82       	std	Y+4, r1	; 0x04
    231a:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState = OK;
    231c:	19 82       	std	Y+1, r1	; 0x01
    231e:	0b c0       	rjmp	.+22     	; 0x2336 <USART_voidSendCharSynch+0x32>

	//Wait until transmit data is empty
	while(GET_BIT(UCSRA,UCSRA_UDRE) == 0 && (Local_u32Counter != USART_u32TIMEOUT))
	{
		Local_u32Counter++;
    2320:	8a 81       	ldd	r24, Y+2	; 0x02
    2322:	9b 81       	ldd	r25, Y+3	; 0x03
    2324:	ac 81       	ldd	r26, Y+4	; 0x04
    2326:	bd 81       	ldd	r27, Y+5	; 0x05
    2328:	01 96       	adiw	r24, 0x01	; 1
    232a:	a1 1d       	adc	r26, r1
    232c:	b1 1d       	adc	r27, r1
    232e:	8a 83       	std	Y+2, r24	; 0x02
    2330:	9b 83       	std	Y+3, r25	; 0x03
    2332:	ac 83       	std	Y+4, r26	; 0x04
    2334:	bd 83       	std	Y+5, r27	; 0x05
{
	u32 Local_u32Counter = 0;
	u8 Local_u8ErrorState = OK;

	//Wait until transmit data is empty
	while(GET_BIT(UCSRA,UCSRA_UDRE) == 0 && (Local_u32Counter != USART_u32TIMEOUT))
    2336:	eb e2       	ldi	r30, 0x2B	; 43
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	82 95       	swap	r24
    233e:	86 95       	lsr	r24
    2340:	87 70       	andi	r24, 0x07	; 7
    2342:	88 2f       	mov	r24, r24
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	81 70       	andi	r24, 0x01	; 1
    2348:	90 70       	andi	r25, 0x00	; 0
    234a:	00 97       	sbiw	r24, 0x00	; 0
    234c:	61 f4       	brne	.+24     	; 0x2366 <USART_voidSendCharSynch+0x62>
    234e:	8a 81       	ldd	r24, Y+2	; 0x02
    2350:	9b 81       	ldd	r25, Y+3	; 0x03
    2352:	ac 81       	ldd	r26, Y+4	; 0x04
    2354:	bd 81       	ldd	r27, Y+5	; 0x05
    2356:	80 35       	cpi	r24, 0x50	; 80
    2358:	23 ec       	ldi	r18, 0xC3	; 195
    235a:	92 07       	cpc	r25, r18
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	a2 07       	cpc	r26, r18
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	b2 07       	cpc	r27, r18
    2364:	e9 f6       	brne	.-70     	; 0x2320 <USART_voidSendCharSynch+0x1c>
	{
		Local_u32Counter++;
	}
	if(Local_u32Counter == USART_u32TIMEOUT)
    2366:	8a 81       	ldd	r24, Y+2	; 0x02
    2368:	9b 81       	ldd	r25, Y+3	; 0x03
    236a:	ac 81       	ldd	r26, Y+4	; 0x04
    236c:	bd 81       	ldd	r27, Y+5	; 0x05
    236e:	80 35       	cpi	r24, 0x50	; 80
    2370:	23 ec       	ldi	r18, 0xC3	; 195
    2372:	92 07       	cpc	r25, r18
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	a2 07       	cpc	r26, r18
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	b2 07       	cpc	r27, r18
    237c:	19 f4       	brne	.+6      	; 0x2384 <USART_voidSendCharSynch+0x80>
	{
		/*Loop is broken because the timeout is reached*/
		Local_u8ErrorState = NOK;
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	89 83       	std	Y+1, r24	; 0x01
    2382:	04 c0       	rjmp	.+8      	; 0x238c <USART_voidSendCharSynch+0x88>
	}
	else
	{
		UDR = Copy_u8Data;
    2384:	ec e2       	ldi	r30, 0x2C	; 44
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	8e 81       	ldd	r24, Y+6	; 0x06
    238a:	80 83       	st	Z, r24
	}

	return Local_u8ErrorState;
    238c:	89 81       	ldd	r24, Y+1	; 0x01
}
    238e:	26 96       	adiw	r28, 0x06	; 6
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	f8 94       	cli
    2394:	de bf       	out	0x3e, r29	; 62
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	cd bf       	out	0x3d, r28	; 61
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	08 95       	ret

000023a0 <USART_u8SendStringSynch>:

u8 USART_u8SendStringSynch(char * Copy_pcString)
{
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	28 97       	sbiw	r28, 0x08	; 8
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	de bf       	out	0x3e, r29	; 62
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	cd bf       	out	0x3d, r28	; 61
    23b4:	9f 83       	std	Y+7, r25	; 0x07
    23b6:	8e 83       	std	Y+6, r24	; 0x06
    u32 Local_u32Iterrator = 0;
    23b8:	1a 82       	std	Y+2, r1	; 0x02
    23ba:	1b 82       	std	Y+3, r1	; 0x03
    23bc:	1c 82       	std	Y+4, r1	; 0x04
    23be:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState = OK;
    23c0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pcString == NULL)
    23c2:	8e 81       	ldd	r24, Y+6	; 0x06
    23c4:	9f 81       	ldd	r25, Y+7	; 0x07
    23c6:	00 97       	sbiw	r24, 0x00	; 0
    23c8:	d1 f4       	brne	.+52     	; 0x23fe <USART_u8SendStringSynch+0x5e>
	{
		return Local_u8ErrorState = NULL_POINTER;
    23ca:	82 e0       	ldi	r24, 0x02	; 2
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	88 87       	std	Y+8, r24	; 0x08
    23d2:	21 c0       	rjmp	.+66     	; 0x2416 <USART_u8SendStringSynch+0x76>
	}
	else
	{
		while(Copy_pcString[Local_u32Iterrator] != '\0')
		{
			USART_voidSendCharSynch(Copy_pcString[Local_u32Iterrator]);
    23d4:	2a 81       	ldd	r18, Y+2	; 0x02
    23d6:	3b 81       	ldd	r19, Y+3	; 0x03
    23d8:	8e 81       	ldd	r24, Y+6	; 0x06
    23da:	9f 81       	ldd	r25, Y+7	; 0x07
    23dc:	fc 01       	movw	r30, r24
    23de:	e2 0f       	add	r30, r18
    23e0:	f3 1f       	adc	r31, r19
    23e2:	80 81       	ld	r24, Z
    23e4:	0e 94 82 11 	call	0x2304	; 0x2304 <USART_voidSendCharSynch>
			Local_u32Iterrator++;
    23e8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ea:	9b 81       	ldd	r25, Y+3	; 0x03
    23ec:	ac 81       	ldd	r26, Y+4	; 0x04
    23ee:	bd 81       	ldd	r27, Y+5	; 0x05
    23f0:	01 96       	adiw	r24, 0x01	; 1
    23f2:	a1 1d       	adc	r26, r1
    23f4:	b1 1d       	adc	r27, r1
    23f6:	8a 83       	std	Y+2, r24	; 0x02
    23f8:	9b 83       	std	Y+3, r25	; 0x03
    23fa:	ac 83       	std	Y+4, r26	; 0x04
    23fc:	bd 83       	std	Y+5, r27	; 0x05
	{
		return Local_u8ErrorState = NULL_POINTER;
	}
	else
	{
		while(Copy_pcString[Local_u32Iterrator] != '\0')
    23fe:	2a 81       	ldd	r18, Y+2	; 0x02
    2400:	3b 81       	ldd	r19, Y+3	; 0x03
    2402:	8e 81       	ldd	r24, Y+6	; 0x06
    2404:	9f 81       	ldd	r25, Y+7	; 0x07
    2406:	fc 01       	movw	r30, r24
    2408:	e2 0f       	add	r30, r18
    240a:	f3 1f       	adc	r31, r19
    240c:	80 81       	ld	r24, Z
    240e:	88 23       	and	r24, r24
    2410:	09 f7       	brne	.-62     	; 0x23d4 <USART_u8SendStringSynch+0x34>
		{
			USART_voidSendCharSynch(Copy_pcString[Local_u32Iterrator]);
			Local_u32Iterrator++;
		}
	}
	return Local_u8ErrorState;
    2412:	89 81       	ldd	r24, Y+1	; 0x01
    2414:	88 87       	std	Y+8, r24	; 0x08
    2416:	88 85       	ldd	r24, Y+8	; 0x08
}
    2418:	28 96       	adiw	r28, 0x08	; 8
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	f8 94       	cli
    241e:	de bf       	out	0x3e, r29	; 62
    2420:	0f be       	out	0x3f, r0	; 63
    2422:	cd bf       	out	0x3d, r28	; 61
    2424:	cf 91       	pop	r28
    2426:	df 91       	pop	r29
    2428:	08 95       	ret

0000242a <USART_u8SendCharAsynch>:

u8 USART_u8SendCharAsynch(u8 Copy_u8Data , void(*Copy_pvNotificationFunc)(void))
{
    242a:	df 93       	push	r29
    242c:	cf 93       	push	r28
    242e:	00 d0       	rcall	.+0      	; 0x2430 <USART_u8SendCharAsynch+0x6>
    2430:	00 d0       	rcall	.+0      	; 0x2432 <USART_u8SendCharAsynch+0x8>
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    2436:	8a 83       	std	Y+2, r24	; 0x02
    2438:	7c 83       	std	Y+4, r23	; 0x04
    243a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    243c:	19 82       	std	Y+1, r1	; 0x01
	if(USART_u8BusyState== IDLE)
    243e:	80 91 72 00 	lds	r24, 0x0072
    2442:	88 23       	and	r24, r24
    2444:	e9 f4       	brne	.+58     	; 0x2480 <USART_u8SendCharAsynch+0x56>
	{
		if((Copy_pvNotificationFunc == NULL))
    2446:	8b 81       	ldd	r24, Y+3	; 0x03
    2448:	9c 81       	ldd	r25, Y+4	; 0x04
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	19 f4       	brne	.+6      	; 0x2454 <USART_u8SendCharAsynch+0x2a>
		{
			Local_u8ErrorState= NULL_POINTER;
    244e:	82 e0       	ldi	r24, 0x02	; 2
    2450:	89 83       	std	Y+1, r24	; 0x01
    2452:	18 c0       	rjmp	.+48     	; 0x2484 <USART_u8SendCharAsynch+0x5a>
		}
		else
		{
			/*make USART busy in order not to work until being idle*/
			USART_u8BusyState= BUSY;
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	80 93 72 00 	sts	0x0072, r24

			/*Make ISR Source : SingleCharAsynch*/
			USART_u8ISRSource = SingleCharAsynch;
    245a:	10 92 7d 00 	sts	0x007D, r1

			/*Initialize globally Data Send*/
			USART_DataSend = Copy_u8Data;
    245e:	8a 81       	ldd	r24, Y+2	; 0x02
    2460:	80 93 7c 00 	sts	0x007C, r24

			/*Initialize the callback notification function globally*/
			USART_pvCallBackNotificationFunc = Copy_pvNotificationFunc;
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	9c 81       	ldd	r25, Y+4	; 0x04
    2468:	90 93 74 00 	sts	0x0074, r25
    246c:	80 93 73 00 	sts	0x0073, r24

			/*USART Data Register Empty interrupt enable*/
			SET_BIT(UCSRB,UCSRB_UDRIE);
    2470:	aa e2       	ldi	r26, 0x2A	; 42
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	ea e2       	ldi	r30, 0x2A	; 42
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	80 62       	ori	r24, 0x20	; 32
    247c:	8c 93       	st	X, r24
    247e:	02 c0       	rjmp	.+4      	; 0x2484 <USART_u8SendCharAsynch+0x5a>
		}
	}
	else
	{
		Local_u8ErrorState= BUSY;
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2484:	89 81       	ldd	r24, Y+1	; 0x01
}
    2486:	0f 90       	pop	r0
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	cf 91       	pop	r28
    2490:	df 91       	pop	r29
    2492:	08 95       	ret

00002494 <USART_u8SendStringAsynch>:



u8 USART_u8SendStringAsynch(char * Copy_pcString , void(*Copy_pvNotificationFunc)(void))
{
    2494:	df 93       	push	r29
    2496:	cf 93       	push	r28
    2498:	00 d0       	rcall	.+0      	; 0x249a <USART_u8SendStringAsynch+0x6>
    249a:	00 d0       	rcall	.+0      	; 0x249c <USART_u8SendStringAsynch+0x8>
    249c:	00 d0       	rcall	.+0      	; 0x249e <USART_u8SendStringAsynch+0xa>
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	9b 83       	std	Y+3, r25	; 0x03
    24a4:	8a 83       	std	Y+2, r24	; 0x02
    24a6:	7d 83       	std	Y+5, r23	; 0x05
    24a8:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK;
    24aa:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pcString == NULL) || (Copy_pvNotificationFunc == NULL))
    24ac:	8a 81       	ldd	r24, Y+2	; 0x02
    24ae:	9b 81       	ldd	r25, Y+3	; 0x03
    24b0:	00 97       	sbiw	r24, 0x00	; 0
    24b2:	21 f0       	breq	.+8      	; 0x24bc <USART_u8SendStringAsynch+0x28>
    24b4:	8c 81       	ldd	r24, Y+4	; 0x04
    24b6:	9d 81       	ldd	r25, Y+5	; 0x05
    24b8:	00 97       	sbiw	r24, 0x00	; 0
    24ba:	29 f4       	brne	.+10     	; 0x24c6 <USART_u8SendStringAsynch+0x32>
	{
		return Local_u8ErrorState = NULL_POINTER;
    24bc:	82 e0       	ldi	r24, 0x02	; 2
    24be:	89 83       	std	Y+1, r24	; 0x01
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	8e 83       	std	Y+6, r24	; 0x06
    24c4:	25 c0       	rjmp	.+74     	; 0x2510 <USART_u8SendStringAsynch+0x7c>
	}
	else
	{
		if(USART_u8BusyState == IDLE)
    24c6:	80 91 72 00 	lds	r24, 0x0072
    24ca:	88 23       	and	r24, r24
    24cc:	21 f4       	brne	.+8      	; 0x24d6 <USART_u8SendStringAsynch+0x42>
		{
			USART_u8BusyState = BUSY;
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	80 93 72 00 	sts	0x0072, r24
    24d4:	1b c0       	rjmp	.+54     	; 0x250c <USART_u8SendStringAsynch+0x78>
		}
		else
		{
			/*USART is now busy*/
			USART_u8BusyState = BUSY;
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	80 93 72 00 	sts	0x0072, r24

			/*MakIe ISR Source: ChainCharAsynch*/
			USART_u8ISRSource = ChainCharAsynch;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	80 93 7d 00 	sts	0x007D, r24

			/*Initialize Globally Array*/
			USART_pcString = Copy_pcString;
    24e2:	8a 81       	ldd	r24, Y+2	; 0x02
    24e4:	9b 81       	ldd	r25, Y+3	; 0x03
    24e6:	90 93 76 00 	sts	0x0076, r25
    24ea:	80 93 75 00 	sts	0x0075, r24

			/*Initialize Notification function*/
			USART_pvCallBackNotificationFunc = Copy_pvNotificationFunc;
    24ee:	8c 81       	ldd	r24, Y+4	; 0x04
    24f0:	9d 81       	ldd	r25, Y+5	; 0x05
    24f2:	90 93 74 00 	sts	0x0074, r25
    24f6:	80 93 73 00 	sts	0x0073, r24

			/*Initialize current conversion Index*/
			USART_u8ChainCharSendingIndex = 0;
    24fa:	10 92 7e 00 	sts	0x007E, r1

			/*USART Data Register Empty interrupt enable*/
			SET_BIT(UCSRB,UCSRB_UDRIE);
    24fe:	aa e2       	ldi	r26, 0x2A	; 42
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	ea e2       	ldi	r30, 0x2A	; 42
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	80 62       	ori	r24, 0x20	; 32
    250a:	8c 93       	st	X, r24
		}

	}

	return Local_u8ErrorState;
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	8e 83       	std	Y+6, r24	; 0x06
    2510:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2512:	26 96       	adiw	r28, 0x06	; 6
    2514:	0f b6       	in	r0, 0x3f	; 63
    2516:	f8 94       	cli
    2518:	de bf       	out	0x3e, r29	; 62
    251a:	0f be       	out	0x3f, r0	; 63
    251c:	cd bf       	out	0x3d, r28	; 61
    251e:	cf 91       	pop	r28
    2520:	df 91       	pop	r29
    2522:	08 95       	ret

00002524 <USART_u8Recieve>:


u8 USART_u8Recieve(void)
{
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,UCSRA_RXC) == 0);
    252c:	eb e2       	ldi	r30, 0x2B	; 43
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	88 23       	and	r24, r24
    2534:	dc f7       	brge	.-10     	; 0x252c <USART_u8Recieve+0x8>
	return UDR;
    2536:	ec e2       	ldi	r30, 0x2C	; 44
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
}
    253c:	cf 91       	pop	r28
    253e:	df 91       	pop	r29
    2540:	08 95       	ret

00002542 <USART_u8RecieveCharSynch>:

u8 USART_u8RecieveCharSynch(void)
{
    2542:	df 93       	push	r29
    2544:	cf 93       	push	r28
    2546:	00 d0       	rcall	.+0      	; 0x2548 <USART_u8RecieveCharSynch+0x6>
    2548:	00 d0       	rcall	.+0      	; 0x254a <USART_u8RecieveCharSynch+0x8>
    254a:	00 d0       	rcall	.+0      	; 0x254c <USART_u8RecieveCharSynch+0xa>
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
	u32 Local_u32Counter = 0;
    2550:	1a 82       	std	Y+2, r1	; 0x02
    2552:	1b 82       	std	Y+3, r1	; 0x03
    2554:	1c 82       	std	Y+4, r1	; 0x04
    2556:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState = OK;
    2558:	19 82       	std	Y+1, r1	; 0x01
    255a:	0b c0       	rjmp	.+22     	; 0x2572 <USART_u8RecieveCharSynch+0x30>

	//Wait until transmit data is empty
	while(GET_BIT(UCSRA,UCSRA_RXC) == 0 && (Local_u32Counter != USART_u32TIMEOUT))
	{
		Local_u32Counter++;
    255c:	8a 81       	ldd	r24, Y+2	; 0x02
    255e:	9b 81       	ldd	r25, Y+3	; 0x03
    2560:	ac 81       	ldd	r26, Y+4	; 0x04
    2562:	bd 81       	ldd	r27, Y+5	; 0x05
    2564:	01 96       	adiw	r24, 0x01	; 1
    2566:	a1 1d       	adc	r26, r1
    2568:	b1 1d       	adc	r27, r1
    256a:	8a 83       	std	Y+2, r24	; 0x02
    256c:	9b 83       	std	Y+3, r25	; 0x03
    256e:	ac 83       	std	Y+4, r26	; 0x04
    2570:	bd 83       	std	Y+5, r27	; 0x05
{
	u32 Local_u32Counter = 0;
	u8 Local_u8ErrorState = OK;

	//Wait until transmit data is empty
	while(GET_BIT(UCSRA,UCSRA_RXC) == 0 && (Local_u32Counter != USART_u32TIMEOUT))
    2572:	eb e2       	ldi	r30, 0x2B	; 43
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	80 81       	ld	r24, Z
    2578:	88 23       	and	r24, r24
    257a:	64 f0       	brlt	.+24     	; 0x2594 <USART_u8RecieveCharSynch+0x52>
    257c:	8a 81       	ldd	r24, Y+2	; 0x02
    257e:	9b 81       	ldd	r25, Y+3	; 0x03
    2580:	ac 81       	ldd	r26, Y+4	; 0x04
    2582:	bd 81       	ldd	r27, Y+5	; 0x05
    2584:	80 35       	cpi	r24, 0x50	; 80
    2586:	23 ec       	ldi	r18, 0xC3	; 195
    2588:	92 07       	cpc	r25, r18
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	a2 07       	cpc	r26, r18
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	b2 07       	cpc	r27, r18
    2592:	21 f7       	brne	.-56     	; 0x255c <USART_u8RecieveCharSynch+0x1a>
	{
		Local_u32Counter++;
	}
	if(Local_u32Counter == USART_u32TIMEOUT)
    2594:	8a 81       	ldd	r24, Y+2	; 0x02
    2596:	9b 81       	ldd	r25, Y+3	; 0x03
    2598:	ac 81       	ldd	r26, Y+4	; 0x04
    259a:	bd 81       	ldd	r27, Y+5	; 0x05
    259c:	80 35       	cpi	r24, 0x50	; 80
    259e:	23 ec       	ldi	r18, 0xC3	; 195
    25a0:	92 07       	cpc	r25, r18
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	a2 07       	cpc	r26, r18
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	b2 07       	cpc	r27, r18
    25aa:	29 f4       	brne	.+10     	; 0x25b6 <USART_u8RecieveCharSynch+0x74>
	{
		/*Loop is broken because the timeout is reached*/
		Local_u8ErrorState = NOK;
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		return UDR;
	}

	return Local_u8ErrorState;
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	8e 83       	std	Y+6, r24	; 0x06
    25b4:	04 c0       	rjmp	.+8      	; 0x25be <USART_u8RecieveCharSynch+0x7c>
		/*Loop is broken because the timeout is reached*/
		Local_u8ErrorState = NOK;
	}
	else
	{
		return UDR;
    25b6:	ec e2       	ldi	r30, 0x2C	; 44
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	20 81       	ld	r18, Z
    25bc:	2e 83       	std	Y+6, r18	; 0x06
    25be:	8e 81       	ldd	r24, Y+6	; 0x06
	}

	return Local_u8ErrorState;
}
    25c0:	26 96       	adiw	r28, 0x06	; 6
    25c2:	0f b6       	in	r0, 0x3f	; 63
    25c4:	f8 94       	cli
    25c6:	de bf       	out	0x3e, r29	; 62
    25c8:	0f be       	out	0x3f, r0	; 63
    25ca:	cd bf       	out	0x3d, r28	; 61
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	08 95       	ret

000025d2 <USART_u8RecieveCharAsynch>:

u8 USART_u8RecieveCharAsynch(u8 * Copy_u8ReceivedData,void(*Copy_pvNotificationFunc)(void))
{
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <USART_u8RecieveCharAsynch+0x6>
    25d8:	00 d0       	rcall	.+0      	; 0x25da <USART_u8RecieveCharAsynch+0x8>
    25da:	0f 92       	push	r0
    25dc:	cd b7       	in	r28, 0x3d	; 61
    25de:	de b7       	in	r29, 0x3e	; 62
    25e0:	9b 83       	std	Y+3, r25	; 0x03
    25e2:	8a 83       	std	Y+2, r24	; 0x02
    25e4:	7d 83       	std	Y+5, r23	; 0x05
    25e6:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState=OK;
    25e8:	19 82       	std	Y+1, r1	; 0x01
	if(USART_u8BusyState== IDLE)
    25ea:	80 91 72 00 	lds	r24, 0x0072
    25ee:	88 23       	and	r24, r24
    25f0:	21 f5       	brne	.+72     	; 0x263a <USART_u8RecieveCharAsynch+0x68>
	{
		if((Copy_pvNotificationFunc == NULL) || (Copy_u8ReceivedData == NULL))
    25f2:	8c 81       	ldd	r24, Y+4	; 0x04
    25f4:	9d 81       	ldd	r25, Y+5	; 0x05
    25f6:	00 97       	sbiw	r24, 0x00	; 0
    25f8:	21 f0       	breq	.+8      	; 0x2602 <USART_u8RecieveCharAsynch+0x30>
    25fa:	8a 81       	ldd	r24, Y+2	; 0x02
    25fc:	9b 81       	ldd	r25, Y+3	; 0x03
    25fe:	00 97       	sbiw	r24, 0x00	; 0
    2600:	19 f4       	brne	.+6      	; 0x2608 <USART_u8RecieveCharAsynch+0x36>
		{
			Local_u8ErrorState= NULL_POINTER;
    2602:	82 e0       	ldi	r24, 0x02	; 2
    2604:	89 83       	std	Y+1, r24	; 0x01
    2606:	1b c0       	rjmp	.+54     	; 0x263e <USART_u8RecieveCharAsynch+0x6c>
		}
		else
		{
			/*make USART busy in order not to work until being idle*/
			USART_u8BusyState= BUSY;
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	80 93 72 00 	sts	0x0072, r24

			/*Make ISR Source : ReceiveCharAsynch*/
			USART_u8ISRSource = ReceiveCharAsynch;
    260e:	10 92 7d 00 	sts	0x007D, r1

			/*Initialize globally Data Send*/
			USART_RecievedData = Copy_u8ReceivedData;
    2612:	8a 81       	ldd	r24, Y+2	; 0x02
    2614:	9b 81       	ldd	r25, Y+3	; 0x03
    2616:	90 93 78 00 	sts	0x0078, r25
    261a:	80 93 77 00 	sts	0x0077, r24

			/*Initialize the callback notification function globally*/
			USART_pvCallBackNotificationFunc = Copy_pvNotificationFunc;
    261e:	8c 81       	ldd	r24, Y+4	; 0x04
    2620:	9d 81       	ldd	r25, Y+5	; 0x05
    2622:	90 93 74 00 	sts	0x0074, r25
    2626:	80 93 73 00 	sts	0x0073, r24

			/*USART RX interrupt enable*/
			SET_BIT(UCSRB,UCSRB_RXEN);
    262a:	aa e2       	ldi	r26, 0x2A	; 42
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	ea e2       	ldi	r30, 0x2A	; 42
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	80 61       	ori	r24, 0x10	; 16
    2636:	8c 93       	st	X, r24
    2638:	02 c0       	rjmp	.+4      	; 0x263e <USART_u8RecieveCharAsynch+0x6c>
		}
	}
	else
	{
		Local_u8ErrorState= BUSY;
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    263e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
    264a:	cf 91       	pop	r28
    264c:	df 91       	pop	r29
    264e:	08 95       	ret

00002650 <USART_voidReceiveBufferSynch>:

u8 USART_voidReceiveBufferSynch(u8 * Copy_u8Buffer , u8 Copy_u8BufferSize)
{
    2650:	0f 93       	push	r16
    2652:	1f 93       	push	r17
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	00 d0       	rcall	.+0      	; 0x265a <USART_voidReceiveBufferSynch+0xa>
    265a:	00 d0       	rcall	.+0      	; 0x265c <USART_voidReceiveBufferSynch+0xc>
    265c:	0f 92       	push	r0
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
    2662:	9c 83       	std	Y+4, r25	; 0x04
    2664:	8b 83       	std	Y+3, r24	; 0x03
    2666:	6d 83       	std	Y+5, r22	; 0x05

	u8 Local_u8ErrorState;
    u8 Local_u32Iterrator;

	if(Copy_u8Buffer == NULL)
    2668:	8b 81       	ldd	r24, Y+3	; 0x03
    266a:	9c 81       	ldd	r25, Y+4	; 0x04
    266c:	00 97       	sbiw	r24, 0x00	; 0
    266e:	19 f4       	brne	.+6      	; 0x2676 <USART_voidReceiveBufferSynch+0x26>
	{
		Local_u8ErrorState= NULL_POINTER;
    2670:	82 e0       	ldi	r24, 0x02	; 2
    2672:	8a 83       	std	Y+2, r24	; 0x02
    2674:	15 c0       	rjmp	.+42     	; 0x26a0 <USART_voidReceiveBufferSynch+0x50>
	}
	else
	{
		for(Local_u32Iterrator = 0; Local_u32Iterrator < Copy_u8BufferSize; Local_u32Iterrator++)
    2676:	19 82       	std	Y+1, r1	; 0x01
    2678:	0f c0       	rjmp	.+30     	; 0x2698 <USART_voidReceiveBufferSynch+0x48>
		{
			Copy_u8Buffer[Local_u32Iterrator] = USART_u8RecieveCharSynch();
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	28 2f       	mov	r18, r24
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
    2682:	9c 81       	ldd	r25, Y+4	; 0x04
    2684:	8c 01       	movw	r16, r24
    2686:	02 0f       	add	r16, r18
    2688:	13 1f       	adc	r17, r19
    268a:	0e 94 a1 12 	call	0x2542	; 0x2542 <USART_u8RecieveCharSynch>
    268e:	f8 01       	movw	r30, r16
    2690:	80 83       	st	Z, r24
	{
		Local_u8ErrorState= NULL_POINTER;
	}
	else
	{
		for(Local_u32Iterrator = 0; Local_u32Iterrator < Copy_u8BufferSize; Local_u32Iterrator++)
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	8f 5f       	subi	r24, 0xFF	; 255
    2696:	89 83       	std	Y+1, r24	; 0x01
    2698:	99 81       	ldd	r25, Y+1	; 0x01
    269a:	8d 81       	ldd	r24, Y+5	; 0x05
    269c:	98 17       	cp	r25, r24
    269e:	68 f3       	brcs	.-38     	; 0x267a <USART_voidReceiveBufferSynch+0x2a>
		{
			Copy_u8Buffer[Local_u32Iterrator] = USART_u8RecieveCharSynch();
		}
	}
	return Local_u8ErrorState;
    26a0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
    26ac:	cf 91       	pop	r28
    26ae:	df 91       	pop	r29
    26b0:	1f 91       	pop	r17
    26b2:	0f 91       	pop	r16
    26b4:	08 95       	ret

000026b6 <USART_voidReceiveBufferAsynch>:

u8 USART_voidReceiveBufferAsynch(u8 * Copy_u8Buffer , u8 Copy_u8BufferSize , void(*Copy_pvNotificationFunc)(void))
{
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	00 d0       	rcall	.+0      	; 0x26bc <USART_voidReceiveBufferAsynch+0x6>
    26bc:	00 d0       	rcall	.+0      	; 0x26be <USART_voidReceiveBufferAsynch+0x8>
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <USART_voidReceiveBufferAsynch+0xa>
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	9b 83       	std	Y+3, r25	; 0x03
    26c6:	8a 83       	std	Y+2, r24	; 0x02
    26c8:	6c 83       	std	Y+4, r22	; 0x04
    26ca:	5e 83       	std	Y+6, r21	; 0x06
    26cc:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=OK;
    26ce:	19 82       	std	Y+1, r1	; 0x01
	if(USART_u8BusyState== IDLE)
    26d0:	80 91 72 00 	lds	r24, 0x0072
    26d4:	88 23       	and	r24, r24
    26d6:	41 f5       	brne	.+80     	; 0x2728 <USART_voidReceiveBufferAsynch+0x72>
	{
		if((Copy_pvNotificationFunc == NULL) || (Copy_u8Buffer == NULL))
    26d8:	8d 81       	ldd	r24, Y+5	; 0x05
    26da:	9e 81       	ldd	r25, Y+6	; 0x06
    26dc:	00 97       	sbiw	r24, 0x00	; 0
    26de:	21 f0       	breq	.+8      	; 0x26e8 <USART_voidReceiveBufferAsynch+0x32>
    26e0:	8a 81       	ldd	r24, Y+2	; 0x02
    26e2:	9b 81       	ldd	r25, Y+3	; 0x03
    26e4:	00 97       	sbiw	r24, 0x00	; 0
    26e6:	19 f4       	brne	.+6      	; 0x26ee <USART_voidReceiveBufferAsynch+0x38>
		{
			Local_u8ErrorState= NULL_POINTER;
    26e8:	82 e0       	ldi	r24, 0x02	; 2
    26ea:	89 83       	std	Y+1, r24	; 0x01
    26ec:	1f c0       	rjmp	.+62     	; 0x272c <USART_voidReceiveBufferAsynch+0x76>
		}
		else
		{
			/*make USART busy in order not to work until being idle*/
			USART_u8BusyState= BUSY;
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	80 93 72 00 	sts	0x0072, r24

			/*Make ISR Source : ReceiveBufferAsynch*/
			USART_u8ISRSource = ReceiveBufferAsynch;
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	80 93 7d 00 	sts	0x007D, r24

			/*Initialize globally Buffer Receive*/
			USART_ReceivedBuffer = Copy_u8Buffer;
    26fa:	8a 81       	ldd	r24, Y+2	; 0x02
    26fc:	9b 81       	ldd	r25, Y+3	; 0x03
    26fe:	90 93 7a 00 	sts	0x007A, r25
    2702:	80 93 79 00 	sts	0x0079, r24

			/*Initialize globally Buffer Size*/
			USART_BufferSize = Copy_u8BufferSize;
    2706:	8c 81       	ldd	r24, Y+4	; 0x04
    2708:	80 93 7f 00 	sts	0x007F, r24

			/*Initialize the callback notification function globally*/
			USART_pvCallBackNotificationFunc = Copy_pvNotificationFunc;
    270c:	8d 81       	ldd	r24, Y+5	; 0x05
    270e:	9e 81       	ldd	r25, Y+6	; 0x06
    2710:	90 93 74 00 	sts	0x0074, r25
    2714:	80 93 73 00 	sts	0x0073, r24

			/*USART RX interrupt enable*/
			SET_BIT(UCSRB,UCSRB_RXEN);
    2718:	aa e2       	ldi	r26, 0x2A	; 42
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	ea e2       	ldi	r30, 0x2A	; 42
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 81       	ld	r24, Z
    2722:	80 61       	ori	r24, 0x10	; 16
    2724:	8c 93       	st	X, r24
    2726:	02 c0       	rjmp	.+4      	; 0x272c <USART_voidReceiveBufferAsynch+0x76>
		}
	}
	else
	{
		Local_u8ErrorState= BUSY;
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    272c:	89 81       	ldd	r24, Y+1	; 0x01
}
    272e:	26 96       	adiw	r28, 0x06	; 6
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	cf 91       	pop	r28
    273c:	df 91       	pop	r29
    273e:	08 95       	ret

00002740 <UART_voidSendDecimalNumber>:

void UART_voidSendDecimalNumber(u32 Copy_u32Number)
{
    2740:	ef 92       	push	r14
    2742:	ff 92       	push	r15
    2744:	0f 93       	push	r16
    2746:	1f 93       	push	r17
    2748:	df 93       	push	r29
    274a:	cf 93       	push	r28
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
    2750:	28 97       	sbiw	r28, 0x08	; 8
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	f8 94       	cli
    2756:	de bf       	out	0x3e, r29	; 62
    2758:	0f be       	out	0x3f, r0	; 63
    275a:	cd bf       	out	0x3d, r28	; 61
    275c:	6d 83       	std	Y+5, r22	; 0x05
    275e:	7e 83       	std	Y+6, r23	; 0x06
    2760:	8f 83       	std	Y+7, r24	; 0x07
    2762:	98 87       	std	Y+8, r25	; 0x08

	u32 Local_u8Reversed = 1;
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	a0 e0       	ldi	r26, 0x00	; 0
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	89 83       	std	Y+1, r24	; 0x01
    276e:	9a 83       	std	Y+2, r25	; 0x02
    2770:	ab 83       	std	Y+3, r26	; 0x03
    2772:	bc 83       	std	Y+4, r27	; 0x04

	if(0 == Copy_u32Number){
    2774:	8d 81       	ldd	r24, Y+5	; 0x05
    2776:	9e 81       	ldd	r25, Y+6	; 0x06
    2778:	af 81       	ldd	r26, Y+7	; 0x07
    277a:	b8 85       	ldd	r27, Y+8	; 0x08
    277c:	00 97       	sbiw	r24, 0x00	; 0
    277e:	a1 05       	cpc	r26, r1
    2780:	b1 05       	cpc	r27, r1
    2782:	d1 f5       	brne	.+116    	; 0x27f8 <UART_voidSendDecimalNumber+0xb8>

		USART_voidSend('0');
    2784:	80 e3       	ldi	r24, 0x30	; 48
    2786:	0e 94 68 11 	call	0x22d0	; 0x22d0 <USART_voidSend>
    278a:	36 c0       	rjmp	.+108    	; 0x27f8 <UART_voidSendDecimalNumber+0xb8>
	}
	while(0 != Copy_u32Number){

		Local_u8Reversed = ((Local_u8Reversed * 10) + (Copy_u32Number % 10));
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	9a 81       	ldd	r25, Y+2	; 0x02
    2790:	ab 81       	ldd	r26, Y+3	; 0x03
    2792:	bc 81       	ldd	r27, Y+4	; 0x04
    2794:	2a e0       	ldi	r18, 0x0A	; 10
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	40 e0       	ldi	r20, 0x00	; 0
    279a:	50 e0       	ldi	r21, 0x00	; 0
    279c:	bc 01       	movw	r22, r24
    279e:	cd 01       	movw	r24, r26
    27a0:	0e 94 43 18 	call	0x3086	; 0x3086 <__mulsi3>
    27a4:	7b 01       	movw	r14, r22
    27a6:	8c 01       	movw	r16, r24
    27a8:	8d 81       	ldd	r24, Y+5	; 0x05
    27aa:	9e 81       	ldd	r25, Y+6	; 0x06
    27ac:	af 81       	ldd	r26, Y+7	; 0x07
    27ae:	b8 85       	ldd	r27, Y+8	; 0x08
    27b0:	2a e0       	ldi	r18, 0x0A	; 10
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	40 e0       	ldi	r20, 0x00	; 0
    27b6:	50 e0       	ldi	r21, 0x00	; 0
    27b8:	bc 01       	movw	r22, r24
    27ba:	cd 01       	movw	r24, r26
    27bc:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__udivmodsi4>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	8e 0d       	add	r24, r14
    27c6:	9f 1d       	adc	r25, r15
    27c8:	a0 1f       	adc	r26, r16
    27ca:	b1 1f       	adc	r27, r17
    27cc:	89 83       	std	Y+1, r24	; 0x01
    27ce:	9a 83       	std	Y+2, r25	; 0x02
    27d0:	ab 83       	std	Y+3, r26	; 0x03
    27d2:	bc 83       	std	Y+4, r27	; 0x04
		Copy_u32Number /= 10;
    27d4:	8d 81       	ldd	r24, Y+5	; 0x05
    27d6:	9e 81       	ldd	r25, Y+6	; 0x06
    27d8:	af 81       	ldd	r26, Y+7	; 0x07
    27da:	b8 85       	ldd	r27, Y+8	; 0x08
    27dc:	2a e0       	ldi	r18, 0x0A	; 10
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e0       	ldi	r20, 0x00	; 0
    27e2:	50 e0       	ldi	r21, 0x00	; 0
    27e4:	bc 01       	movw	r22, r24
    27e6:	cd 01       	movw	r24, r26
    27e8:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__udivmodsi4>
    27ec:	da 01       	movw	r26, r20
    27ee:	c9 01       	movw	r24, r18
    27f0:	8d 83       	std	Y+5, r24	; 0x05
    27f2:	9e 83       	std	Y+6, r25	; 0x06
    27f4:	af 83       	std	Y+7, r26	; 0x07
    27f6:	b8 87       	std	Y+8, r27	; 0x08

	if(0 == Copy_u32Number){

		USART_voidSend('0');
	}
	while(0 != Copy_u32Number){
    27f8:	8d 81       	ldd	r24, Y+5	; 0x05
    27fa:	9e 81       	ldd	r25, Y+6	; 0x06
    27fc:	af 81       	ldd	r26, Y+7	; 0x07
    27fe:	b8 85       	ldd	r27, Y+8	; 0x08
    2800:	00 97       	sbiw	r24, 0x00	; 0
    2802:	a1 05       	cpc	r26, r1
    2804:	b1 05       	cpc	r27, r1
    2806:	11 f6       	brne	.-124    	; 0x278c <UART_voidSendDecimalNumber+0x4c>
    2808:	23 c0       	rjmp	.+70     	; 0x2850 <UART_voidSendDecimalNumber+0x110>
		Local_u8Reversed = ((Local_u8Reversed * 10) + (Copy_u32Number % 10));
		Copy_u32Number /= 10;
	}
	while(1 != Local_u8Reversed){

		USART_voidSend((Local_u8Reversed % 10 ) + 48);
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	9a 81       	ldd	r25, Y+2	; 0x02
    280e:	ab 81       	ldd	r26, Y+3	; 0x03
    2810:	bc 81       	ldd	r27, Y+4	; 0x04
    2812:	2a e0       	ldi	r18, 0x0A	; 10
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e0       	ldi	r20, 0x00	; 0
    2818:	50 e0       	ldi	r21, 0x00	; 0
    281a:	bc 01       	movw	r22, r24
    281c:	cd 01       	movw	r24, r26
    281e:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__udivmodsi4>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	80 5d       	subi	r24, 0xD0	; 208
    2828:	0e 94 68 11 	call	0x22d0	; 0x22d0 <USART_voidSend>
		Local_u8Reversed /= 10;
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	9a 81       	ldd	r25, Y+2	; 0x02
    2830:	ab 81       	ldd	r26, Y+3	; 0x03
    2832:	bc 81       	ldd	r27, Y+4	; 0x04
    2834:	2a e0       	ldi	r18, 0x0A	; 10
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	40 e0       	ldi	r20, 0x00	; 0
    283a:	50 e0       	ldi	r21, 0x00	; 0
    283c:	bc 01       	movw	r22, r24
    283e:	cd 01       	movw	r24, r26
    2840:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__udivmodsi4>
    2844:	da 01       	movw	r26, r20
    2846:	c9 01       	movw	r24, r18
    2848:	89 83       	std	Y+1, r24	; 0x01
    284a:	9a 83       	std	Y+2, r25	; 0x02
    284c:	ab 83       	std	Y+3, r26	; 0x03
    284e:	bc 83       	std	Y+4, r27	; 0x04
	while(0 != Copy_u32Number){

		Local_u8Reversed = ((Local_u8Reversed * 10) + (Copy_u32Number % 10));
		Copy_u32Number /= 10;
	}
	while(1 != Local_u8Reversed){
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	9a 81       	ldd	r25, Y+2	; 0x02
    2854:	ab 81       	ldd	r26, Y+3	; 0x03
    2856:	bc 81       	ldd	r27, Y+4	; 0x04
    2858:	81 30       	cpi	r24, 0x01	; 1
    285a:	91 05       	cpc	r25, r1
    285c:	a1 05       	cpc	r26, r1
    285e:	b1 05       	cpc	r27, r1
    2860:	a1 f6       	brne	.-88     	; 0x280a <UART_voidSendDecimalNumber+0xca>

		USART_voidSend((Local_u8Reversed % 10 ) + 48);
		Local_u8Reversed /= 10;
	}

}
    2862:	28 96       	adiw	r28, 0x08	; 8
    2864:	0f b6       	in	r0, 0x3f	; 63
    2866:	f8 94       	cli
    2868:	de bf       	out	0x3e, r29	; 62
    286a:	0f be       	out	0x3f, r0	; 63
    286c:	cd bf       	out	0x3d, r28	; 61
    286e:	cf 91       	pop	r28
    2870:	df 91       	pop	r29
    2872:	1f 91       	pop	r17
    2874:	0f 91       	pop	r16
    2876:	ff 90       	pop	r15
    2878:	ef 90       	pop	r14
    287a:	08 95       	ret

0000287c <__vector_13>:
void __vector_13 (void) __attribute__((signal));
void __vector_13 (void)
{
    287c:	1f 92       	push	r1
    287e:	0f 92       	push	r0
    2880:	0f b6       	in	r0, 0x3f	; 63
    2882:	0f 92       	push	r0
    2884:	11 24       	eor	r1, r1
    2886:	2f 93       	push	r18
    2888:	3f 93       	push	r19
    288a:	4f 93       	push	r20
    288c:	5f 93       	push	r21
    288e:	6f 93       	push	r22
    2890:	7f 93       	push	r23
    2892:	8f 93       	push	r24
    2894:	9f 93       	push	r25
    2896:	af 93       	push	r26
    2898:	bf 93       	push	r27
    289a:	ef 93       	push	r30
    289c:	ff 93       	push	r31
    289e:	df 93       	push	r29
    28a0:	cf 93       	push	r28
    28a2:	cd b7       	in	r28, 0x3d	; 61
    28a4:	de b7       	in	r29, 0x3e	; 62
	if(USART_u8ISRSource == ReceiveCharAsynch)
    28a6:	80 91 7d 00 	lds	r24, 0x007D
    28aa:	88 23       	and	r24, r24
    28ac:	b9 f4       	brne	.+46     	; 0x28dc <__vector_13+0x60>
	{
		*USART_RecievedData = UDR;
    28ae:	a0 91 77 00 	lds	r26, 0x0077
    28b2:	b0 91 78 00 	lds	r27, 0x0078
    28b6:	ec e2       	ldi	r30, 0x2C	; 44
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	80 81       	ld	r24, Z
    28bc:	8c 93       	st	X, r24

		/*Make USART state be IDLE because it finished*/
		USART_u8BusyState = IDLE;
    28be:	10 92 72 00 	sts	0x0072, r1

		/*Invoke the callback notification function*/
		USART_pvCallBackNotificationFunc();
    28c2:	e0 91 73 00 	lds	r30, 0x0073
    28c6:	f0 91 74 00 	lds	r31, 0x0074
    28ca:	09 95       	icall

		/*USART RX interrupt Disable*/
		CLR_BIT(UCSRB,UCSRB_RXEN);
    28cc:	aa e2       	ldi	r26, 0x2A	; 42
    28ce:	b0 e0       	ldi	r27, 0x00	; 0
    28d0:	ea e2       	ldi	r30, 0x2A	; 42
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	80 81       	ld	r24, Z
    28d6:	8f 7e       	andi	r24, 0xEF	; 239
    28d8:	8c 93       	st	X, r24
    28da:	2c c0       	rjmp	.+88     	; 0x2934 <__vector_13+0xb8>
	}
	else if(USART_u8ISRSource == ReceiveBufferAsynch)
    28dc:	80 91 7d 00 	lds	r24, 0x007D
    28e0:	81 30       	cpi	r24, 0x01	; 1
    28e2:	41 f5       	brne	.+80     	; 0x2934 <__vector_13+0xb8>
	{
		static u8 USART_u8BufferIterator = 0;
		/*Receive Buffer*/
		USART_ReceivedBuffer[USART_u8BufferIterator] = UDR;
    28e4:	20 91 79 00 	lds	r18, 0x0079
    28e8:	30 91 7a 00 	lds	r19, 0x007A
    28ec:	80 91 7b 00 	lds	r24, 0x007B
    28f0:	88 2f       	mov	r24, r24
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	d9 01       	movw	r26, r18
    28f6:	a8 0f       	add	r26, r24
    28f8:	b9 1f       	adc	r27, r25
    28fa:	ec e2       	ldi	r30, 0x2C	; 44
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	80 81       	ld	r24, Z
    2900:	8c 93       	st	X, r24

		/*Increment Buffer index*/
		USART_u8BufferIterator++;
    2902:	80 91 7b 00 	lds	r24, 0x007B
    2906:	8f 5f       	subi	r24, 0xFF	; 255
    2908:	80 93 7b 00 	sts	0x007B, r24

		/*check Buffer is finished or not*/
		if(USART_u8BufferIterator == USART_BufferSize)
    290c:	90 91 7b 00 	lds	r25, 0x007B
    2910:	80 91 7f 00 	lds	r24, 0x007F
    2914:	98 17       	cp	r25, r24
    2916:	71 f4       	brne	.+28     	; 0x2934 <__vector_13+0xb8>
		{
			/*Buffer is finished*/
			/*USART is now IDLE*/
			USART_u8BusyState = IDLE;
    2918:	10 92 72 00 	sts	0x0072, r1

			/*Invoke the callback notification function*/
			USART_pvCallBackNotificationFunc();
    291c:	e0 91 73 00 	lds	r30, 0x0073
    2920:	f0 91 74 00 	lds	r31, 0x0074
    2924:	09 95       	icall

			/*Disable USART RX interrupt*/
			CLR_BIT(UCSRB,UCSRB_RXEN);
    2926:	aa e2       	ldi	r26, 0x2A	; 42
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	ea e2       	ldi	r30, 0x2A	; 42
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	80 81       	ld	r24, Z
    2930:	8f 7e       	andi	r24, 0xEF	; 239
    2932:	8c 93       	st	X, r24
		{
			/*Buffer is not finished*/
		}

	}
}
    2934:	cf 91       	pop	r28
    2936:	df 91       	pop	r29
    2938:	ff 91       	pop	r31
    293a:	ef 91       	pop	r30
    293c:	bf 91       	pop	r27
    293e:	af 91       	pop	r26
    2940:	9f 91       	pop	r25
    2942:	8f 91       	pop	r24
    2944:	7f 91       	pop	r23
    2946:	6f 91       	pop	r22
    2948:	5f 91       	pop	r21
    294a:	4f 91       	pop	r20
    294c:	3f 91       	pop	r19
    294e:	2f 91       	pop	r18
    2950:	0f 90       	pop	r0
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	0f 90       	pop	r0
    2956:	1f 90       	pop	r1
    2958:	18 95       	reti

0000295a <__vector_15>:

void __vector_15 (void) __attribute__((signal));
void __vector_15 (void)
{
    295a:	1f 92       	push	r1
    295c:	0f 92       	push	r0
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	0f 92       	push	r0
    2962:	11 24       	eor	r1, r1
    2964:	df 93       	push	r29
    2966:	cf 93       	push	r28
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62

}
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	0f 90       	pop	r0
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	0f 90       	pop	r0
    2976:	1f 90       	pop	r1
    2978:	18 95       	reti

0000297a <__vector_14>:

/*ISR DATA EMPTY REGISTER*/
void __vector_14 (void) __attribute__((signal));
void __vector_14 (void)
{
    297a:	1f 92       	push	r1
    297c:	0f 92       	push	r0
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	0f 92       	push	r0
    2982:	11 24       	eor	r1, r1
    2984:	2f 93       	push	r18
    2986:	3f 93       	push	r19
    2988:	4f 93       	push	r20
    298a:	5f 93       	push	r21
    298c:	6f 93       	push	r22
    298e:	7f 93       	push	r23
    2990:	8f 93       	push	r24
    2992:	9f 93       	push	r25
    2994:	af 93       	push	r26
    2996:	bf 93       	push	r27
    2998:	ef 93       	push	r30
    299a:	ff 93       	push	r31
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	cd b7       	in	r28, 0x3d	; 61
    29a2:	de b7       	in	r29, 0x3e	; 62
	if(USART_u8ISRSource == SingleCharAsynch)
    29a4:	80 91 7d 00 	lds	r24, 0x007D
    29a8:	88 23       	and	r24, r24
    29aa:	a1 f4       	brne	.+40     	; 0x29d4 <__vector_14+0x5a>
	{

		UDR = USART_DataSend;
    29ac:	ec e2       	ldi	r30, 0x2C	; 44
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 91 7c 00 	lds	r24, 0x007C
    29b4:	80 83       	st	Z, r24

		/*Make USART state be IDLE because it finished*/
		USART_u8BusyState = IDLE;
    29b6:	10 92 72 00 	sts	0x0072, r1

		/*Invoke the callback notification function*/
		USART_pvCallBackNotificationFunc();
    29ba:	e0 91 73 00 	lds	r30, 0x0073
    29be:	f0 91 74 00 	lds	r31, 0x0074
    29c2:	09 95       	icall

		/*Disable USART Data Register Empty interrupt*/
		CLR_BIT(UCSRB,UCSRB_UDRIE);
    29c4:	aa e2       	ldi	r26, 0x2A	; 42
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	ea e2       	ldi	r30, 0x2A	; 42
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	80 81       	ld	r24, Z
    29ce:	8f 7d       	andi	r24, 0xDF	; 223
    29d0:	8c 93       	st	X, r24
    29d2:	34 c0       	rjmp	.+104    	; 0x2a3c <__vector_14+0xc2>
	}
	else if(USART_u8ISRSource == ChainCharAsynch)
    29d4:	80 91 7d 00 	lds	r24, 0x007D
    29d8:	81 30       	cpi	r24, 0x01	; 1
    29da:	81 f5       	brne	.+96     	; 0x2a3c <__vector_14+0xc2>
	{
		/*Send Data*/
		UDR = USART_pcString[USART_u8ChainCharSendingIndex];
    29dc:	ac e2       	ldi	r26, 0x2C	; 44
    29de:	b0 e0       	ldi	r27, 0x00	; 0
    29e0:	20 91 75 00 	lds	r18, 0x0075
    29e4:	30 91 76 00 	lds	r19, 0x0076
    29e8:	80 91 7e 00 	lds	r24, 0x007E
    29ec:	88 2f       	mov	r24, r24
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	f9 01       	movw	r30, r18
    29f2:	e8 0f       	add	r30, r24
    29f4:	f9 1f       	adc	r31, r25
    29f6:	80 81       	ld	r24, Z
    29f8:	8c 93       	st	X, r24

		/*Increment Chain index*/
		USART_u8ChainCharSendingIndex++;
    29fa:	80 91 7e 00 	lds	r24, 0x007E
    29fe:	8f 5f       	subi	r24, 0xFF	; 255
    2a00:	80 93 7e 00 	sts	0x007E, r24

		/*check chain is finished or not*/
		if(USART_pcString[USART_u8ChainCharSendingIndex] == '\0')
    2a04:	20 91 75 00 	lds	r18, 0x0075
    2a08:	30 91 76 00 	lds	r19, 0x0076
    2a0c:	80 91 7e 00 	lds	r24, 0x007E
    2a10:	88 2f       	mov	r24, r24
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	f9 01       	movw	r30, r18
    2a16:	e8 0f       	add	r30, r24
    2a18:	f9 1f       	adc	r31, r25
    2a1a:	80 81       	ld	r24, Z
    2a1c:	88 23       	and	r24, r24
    2a1e:	71 f4       	brne	.+28     	; 0x2a3c <__vector_14+0xc2>
		{
			/*Chain is finished*/
			/*USART is now IDLE*/
			USART_u8BusyState = IDLE;
    2a20:	10 92 72 00 	sts	0x0072, r1

			/*Invoke the callback notification function*/
			USART_pvCallBackNotificationFunc();
    2a24:	e0 91 73 00 	lds	r30, 0x0073
    2a28:	f0 91 74 00 	lds	r31, 0x0074
    2a2c:	09 95       	icall

			/*Disable USART Data Register Empty interrupt*/
			CLR_BIT(UCSRB,UCSRB_UDRIE);
    2a2e:	aa e2       	ldi	r26, 0x2A	; 42
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	ea e2       	ldi	r30, 0x2A	; 42
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	80 81       	ld	r24, Z
    2a38:	8f 7d       	andi	r24, 0xDF	; 223
    2a3a:	8c 93       	st	X, r24
		}

	}
}
    2a3c:	cf 91       	pop	r28
    2a3e:	df 91       	pop	r29
    2a40:	ff 91       	pop	r31
    2a42:	ef 91       	pop	r30
    2a44:	bf 91       	pop	r27
    2a46:	af 91       	pop	r26
    2a48:	9f 91       	pop	r25
    2a4a:	8f 91       	pop	r24
    2a4c:	7f 91       	pop	r23
    2a4e:	6f 91       	pop	r22
    2a50:	5f 91       	pop	r21
    2a52:	4f 91       	pop	r20
    2a54:	3f 91       	pop	r19
    2a56:	2f 91       	pop	r18
    2a58:	0f 90       	pop	r0
    2a5a:	0f be       	out	0x3f, r0	; 63
    2a5c:	0f 90       	pop	r0
    2a5e:	1f 90       	pop	r1
    2a60:	18 95       	reti

00002a62 <Ultrasonic_voidInit>:
u32 distance;



void Ultrasonic_voidInit(void)
{
    2a62:	df 93       	push	r29
    2a64:	cf 93       	push	r28
    2a66:	cd b7       	in	r28, 0x3d	; 61
    2a68:	de b7       	in	r29, 0x3e	; 62

	TIMER0_voidInit();
    2a6a:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TIMER0_voidInit>

	DIO_u8SetPinDirection(ECHO_PORT,ECHO_PIN,DIO_u8PIN_INPUT);
    2a6e:	83 e0       	ldi	r24, 0x03	; 3
    2a70:	63 e0       	ldi	r22, 0x03	; 3
    2a72:	40 e0       	ldi	r20, 0x00	; 0
    2a74:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(ECHO_PORT,ECHO_PIN,DIO_u8PIN_HIGH);
    2a78:	83 e0       	ldi	r24, 0x03	; 3
    2a7a:	63 e0       	ldi	r22, 0x03	; 3
    2a7c:	41 e0       	ldi	r20, 0x01	; 1
    2a7e:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(TRIGER_PORT,TRIGER_PIN,DIO_u8PIN_OUTPUT);
    2a82:	82 e0       	ldi	r24, 0x02	; 2
    2a84:	60 e0       	ldi	r22, 0x00	; 0
    2a86:	41 e0       	ldi	r20, 0x01	; 1
    2a88:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>

	EXTI_voidInt1Init();
    2a8c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <EXTI_voidInt1Init>

}
    2a90:	cf 91       	pop	r28
    2a92:	df 91       	pop	r29
    2a94:	08 95       	ret

00002a96 <Ultra_voidTriger>:


void Ultra_voidTriger(void)
{
    2a96:	df 93       	push	r29
    2a98:	cf 93       	push	r28
    2a9a:	cd b7       	in	r28, 0x3d	; 61
    2a9c:	de b7       	in	r29, 0x3e	; 62
    2a9e:	68 97       	sbiw	r28, 0x18	; 24
    2aa0:	0f b6       	in	r0, 0x3f	; 63
    2aa2:	f8 94       	cli
    2aa4:	de bf       	out	0x3e, r29	; 62
    2aa6:	0f be       	out	0x3f, r0	; 63
    2aa8:	cd bf       	out	0x3d, r28	; 61
	if(!sensor_working){
    2aaa:	80 91 80 00 	lds	r24, 0x0080
    2aae:	88 23       	and	r24, r24
    2ab0:	09 f0       	breq	.+2      	; 0x2ab4 <Ultra_voidTriger+0x1e>
    2ab2:	d7 c0       	rjmp	.+430    	; 0x2c62 <Ultra_voidTriger+0x1cc>

		DIO_u8SetPinValue(TRIGER_PORT,TRIGER_PIN,DIO_u8PIN_HIGH);
    2ab4:	82 e0       	ldi	r24, 0x02	; 2
    2ab6:	60 e0       	ldi	r22, 0x00	; 0
    2ab8:	41 e0       	ldi	r20, 0x01	; 1
    2aba:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	a0 e7       	ldi	r26, 0x70	; 112
    2ac4:	b1 e4       	ldi	r27, 0x41	; 65
    2ac6:	8d 8b       	std	Y+21, r24	; 0x15
    2ac8:	9e 8b       	std	Y+22, r25	; 0x16
    2aca:	af 8b       	std	Y+23, r26	; 0x17
    2acc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ace:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad6:	2b ea       	ldi	r18, 0xAB	; 171
    2ad8:	3a ea       	ldi	r19, 0xAA	; 170
    2ada:	4a e2       	ldi	r20, 0x2A	; 42
    2adc:	50 e4       	ldi	r21, 0x40	; 64
    2ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	89 8b       	std	Y+17, r24	; 0x11
    2ae8:	9a 8b       	std	Y+18, r25	; 0x12
    2aea:	ab 8b       	std	Y+19, r26	; 0x13
    2aec:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2aee:	69 89       	ldd	r22, Y+17	; 0x11
    2af0:	7a 89       	ldd	r23, Y+18	; 0x12
    2af2:	8b 89       	ldd	r24, Y+19	; 0x13
    2af4:	9c 89       	ldd	r25, Y+20	; 0x14
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	40 e8       	ldi	r20, 0x80	; 128
    2afc:	5f e3       	ldi	r21, 0x3F	; 63
    2afe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b02:	88 23       	and	r24, r24
    2b04:	1c f4       	brge	.+6      	; 0x2b0c <Ultra_voidTriger+0x76>
		__ticks = 1;
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	88 8b       	std	Y+16, r24	; 0x10
    2b0a:	91 c0       	rjmp	.+290    	; 0x2c2e <Ultra_voidTriger+0x198>
	else if (__tmp > 255)
    2b0c:	69 89       	ldd	r22, Y+17	; 0x11
    2b0e:	7a 89       	ldd	r23, Y+18	; 0x12
    2b10:	8b 89       	ldd	r24, Y+19	; 0x13
    2b12:	9c 89       	ldd	r25, Y+20	; 0x14
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	4f e7       	ldi	r20, 0x7F	; 127
    2b1a:	53 e4       	ldi	r21, 0x43	; 67
    2b1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b20:	18 16       	cp	r1, r24
    2b22:	0c f0       	brlt	.+2      	; 0x2b26 <Ultra_voidTriger+0x90>
    2b24:	7b c0       	rjmp	.+246    	; 0x2c1c <Ultra_voidTriger+0x186>
	{
		_delay_ms(__us / 1000.0);
    2b26:	6d 89       	ldd	r22, Y+21	; 0x15
    2b28:	7e 89       	ldd	r23, Y+22	; 0x16
    2b2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	4a e7       	ldi	r20, 0x7A	; 122
    2b34:	54 e4       	ldi	r21, 0x44	; 68
    2b36:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	8c 87       	std	Y+12, r24	; 0x0c
    2b40:	9d 87       	std	Y+13, r25	; 0x0d
    2b42:	ae 87       	std	Y+14, r26	; 0x0e
    2b44:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b46:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b48:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b4a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b4c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	4a ef       	ldi	r20, 0xFA	; 250
    2b54:	54 e4       	ldi	r21, 0x44	; 68
    2b56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	88 87       	std	Y+8, r24	; 0x08
    2b60:	99 87       	std	Y+9, r25	; 0x09
    2b62:	aa 87       	std	Y+10, r26	; 0x0a
    2b64:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b66:	68 85       	ldd	r22, Y+8	; 0x08
    2b68:	79 85       	ldd	r23, Y+9	; 0x09
    2b6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e8       	ldi	r20, 0x80	; 128
    2b74:	5f e3       	ldi	r21, 0x3F	; 63
    2b76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b7a:	88 23       	and	r24, r24
    2b7c:	2c f4       	brge	.+10     	; 0x2b88 <Ultra_voidTriger+0xf2>
		__ticks = 1;
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	9f 83       	std	Y+7, r25	; 0x07
    2b84:	8e 83       	std	Y+6, r24	; 0x06
    2b86:	3f c0       	rjmp	.+126    	; 0x2c06 <Ultra_voidTriger+0x170>
	else if (__tmp > 65535)
    2b88:	68 85       	ldd	r22, Y+8	; 0x08
    2b8a:	79 85       	ldd	r23, Y+9	; 0x09
    2b8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	3f ef       	ldi	r19, 0xFF	; 255
    2b94:	4f e7       	ldi	r20, 0x7F	; 127
    2b96:	57 e4       	ldi	r21, 0x47	; 71
    2b98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b9c:	18 16       	cp	r1, r24
    2b9e:	4c f5       	brge	.+82     	; 0x2bf2 <Ultra_voidTriger+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba0:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ba2:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ba4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ba6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	40 e2       	ldi	r20, 0x20	; 32
    2bae:	51 e4       	ldi	r21, 0x41	; 65
    2bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	bc 01       	movw	r22, r24
    2bba:	cd 01       	movw	r24, r26
    2bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	9f 83       	std	Y+7, r25	; 0x07
    2bc6:	8e 83       	std	Y+6, r24	; 0x06
    2bc8:	0f c0       	rjmp	.+30     	; 0x2be8 <Ultra_voidTriger+0x152>
    2bca:	88 ec       	ldi	r24, 0xC8	; 200
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	9d 83       	std	Y+5, r25	; 0x05
    2bd0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bd2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bd4:	9d 81       	ldd	r25, Y+5	; 0x05
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	f1 f7       	brne	.-4      	; 0x2bd6 <Ultra_voidTriger+0x140>
    2bda:	9d 83       	std	Y+5, r25	; 0x05
    2bdc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bde:	8e 81       	ldd	r24, Y+6	; 0x06
    2be0:	9f 81       	ldd	r25, Y+7	; 0x07
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	9f 83       	std	Y+7, r25	; 0x07
    2be6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be8:	8e 81       	ldd	r24, Y+6	; 0x06
    2bea:	9f 81       	ldd	r25, Y+7	; 0x07
    2bec:	00 97       	sbiw	r24, 0x00	; 0
    2bee:	69 f7       	brne	.-38     	; 0x2bca <Ultra_voidTriger+0x134>
    2bf0:	24 c0       	rjmp	.+72     	; 0x2c3a <Ultra_voidTriger+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf2:	68 85       	ldd	r22, Y+8	; 0x08
    2bf4:	79 85       	ldd	r23, Y+9	; 0x09
    2bf6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bf8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	9f 83       	std	Y+7, r25	; 0x07
    2c04:	8e 83       	std	Y+6, r24	; 0x06
    2c06:	8e 81       	ldd	r24, Y+6	; 0x06
    2c08:	9f 81       	ldd	r25, Y+7	; 0x07
    2c0a:	9b 83       	std	Y+3, r25	; 0x03
    2c0c:	8a 83       	std	Y+2, r24	; 0x02
    2c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c10:	9b 81       	ldd	r25, Y+3	; 0x03
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	f1 f7       	brne	.-4      	; 0x2c12 <Ultra_voidTriger+0x17c>
    2c16:	9b 83       	std	Y+3, r25	; 0x03
    2c18:	8a 83       	std	Y+2, r24	; 0x02
    2c1a:	0f c0       	rjmp	.+30     	; 0x2c3a <Ultra_voidTriger+0x1a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c1c:	69 89       	ldd	r22, Y+17	; 0x11
    2c1e:	7a 89       	ldd	r23, Y+18	; 0x12
    2c20:	8b 89       	ldd	r24, Y+19	; 0x13
    2c22:	9c 89       	ldd	r25, Y+20	; 0x14
    2c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	88 8b       	std	Y+16, r24	; 0x10
    2c2e:	88 89       	ldd	r24, Y+16	; 0x10
    2c30:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	8a 95       	dec	r24
    2c36:	f1 f7       	brne	.-4      	; 0x2c34 <Ultra_voidTriger+0x19e>
    2c38:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(15);
		DIO_u8SetPinValue(TRIGER_PORT,TRIGER_PIN,DIO_u8PIN_LOW);
    2c3a:	82 e0       	ldi	r24, 0x02	; 2
    2c3c:	60 e0       	ldi	r22, 0x00	; 0
    2c3e:	40 e0       	ldi	r20, 0x00	; 0
    2c40:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>
		sensor_working=1;
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	80 93 80 00 	sts	0x0080, r24
		UART_voidSendDecimalNumber(distance);
    2c4a:	80 91 86 00 	lds	r24, 0x0086
    2c4e:	90 91 87 00 	lds	r25, 0x0087
    2c52:	a0 91 88 00 	lds	r26, 0x0088
    2c56:	b0 91 89 00 	lds	r27, 0x0089
    2c5a:	bc 01       	movw	r22, r24
    2c5c:	cd 01       	movw	r24, r26
    2c5e:	0e 94 a0 13 	call	0x2740	; 0x2740 <UART_voidSendDecimalNumber>

	}

}
    2c62:	68 96       	adiw	r28, 0x18	; 24
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	de bf       	out	0x3e, r29	; 62
    2c6a:	0f be       	out	0x3f, r0	; 63
    2c6c:	cd bf       	out	0x3d, r28	; 61
    2c6e:	cf 91       	pop	r28
    2c70:	df 91       	pop	r29
    2c72:	08 95       	ret

00002c74 <ISR>:


ISR(INT1_vector)
{
    2c74:	df 93       	push	r29
    2c76:	cf 93       	push	r28
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62
    2c7c:	62 97       	sbiw	r28, 0x12	; 18
    2c7e:	0f b6       	in	r0, 0x3f	; 63
    2c80:	f8 94       	cli
    2c82:	de bf       	out	0x3e, r29	; 62
    2c84:	0f be       	out	0x3f, r0	; 63
    2c86:	cd bf       	out	0x3d, r28	; 61
    2c88:	98 8b       	std	Y+16, r25	; 0x10
    2c8a:	8f 87       	std	Y+15, r24	; 0x0f
	if(sensor_working==1)
    2c8c:	80 91 80 00 	lds	r24, 0x0080
    2c90:	81 30       	cpi	r24, 0x01	; 1
    2c92:	09 f0       	breq	.+2      	; 0x2c96 <ISR+0x22>
    2c94:	bd c0       	rjmp	.+378    	; 0x2e10 <ISR+0x19c>
	{
		if(rising_edge==0)
    2c96:	80 91 81 00 	lds	r24, 0x0081
    2c9a:	88 23       	and	r24, r24
    2c9c:	79 f4       	brne	.+30     	; 0x2cbc <ISR+0x48>
		{
			TCNT0=0x00;
    2c9e:	e2 e5       	ldi	r30, 0x52	; 82
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	10 82       	st	Z, r1
			rising_edge=1;
    2ca4:	81 e0       	ldi	r24, 0x01	; 1
    2ca6:	80 93 81 00 	sts	0x0081, r24
			timer_counter=0;
    2caa:	10 92 82 00 	sts	0x0082, r1
    2cae:	10 92 83 00 	sts	0x0083, r1
    2cb2:	10 92 84 00 	sts	0x0084, r1
    2cb6:	10 92 85 00 	sts	0x0085, r1
    2cba:	aa c0       	rjmp	.+340    	; 0x2e10 <ISR+0x19c>
		}
		else{
			distance=(timer_counter*256+TCNT0)/466;
    2cbc:	80 91 82 00 	lds	r24, 0x0082
    2cc0:	90 91 83 00 	lds	r25, 0x0083
    2cc4:	a0 91 84 00 	lds	r26, 0x0084
    2cc8:	b0 91 85 00 	lds	r27, 0x0085
    2ccc:	22 27       	eor	r18, r18
    2cce:	38 2f       	mov	r19, r24
    2cd0:	49 2f       	mov	r20, r25
    2cd2:	5a 2f       	mov	r21, r26
    2cd4:	e2 e5       	ldi	r30, 0x52	; 82
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	88 2f       	mov	r24, r24
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	a0 e0       	ldi	r26, 0x00	; 0
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	82 0f       	add	r24, r18
    2ce4:	93 1f       	adc	r25, r19
    2ce6:	a4 1f       	adc	r26, r20
    2ce8:	b5 1f       	adc	r27, r21
    2cea:	22 ed       	ldi	r18, 0xD2	; 210
    2cec:	31 e0       	ldi	r19, 0x01	; 1
    2cee:	40 e0       	ldi	r20, 0x00	; 0
    2cf0:	50 e0       	ldi	r21, 0x00	; 0
    2cf2:	bc 01       	movw	r22, r24
    2cf4:	cd 01       	movw	r24, r26
    2cf6:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__udivmodsi4>
    2cfa:	da 01       	movw	r26, r20
    2cfc:	c9 01       	movw	r24, r18
    2cfe:	80 93 86 00 	sts	0x0086, r24
    2d02:	90 93 87 00 	sts	0x0087, r25
    2d06:	a0 93 88 00 	sts	0x0088, r26
    2d0a:	b0 93 89 00 	sts	0x0089, r27
    2d0e:	80 e0       	ldi	r24, 0x00	; 0
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	a0 e2       	ldi	r26, 0x20	; 32
    2d14:	b2 e4       	ldi	r27, 0x42	; 66
    2d16:	8b 87       	std	Y+11, r24	; 0x0b
    2d18:	9c 87       	std	Y+12, r25	; 0x0c
    2d1a:	ad 87       	std	Y+13, r26	; 0x0d
    2d1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	4a ef       	ldi	r20, 0xFA	; 250
    2d2c:	54 e4       	ldi	r21, 0x44	; 68
    2d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	8f 83       	std	Y+7, r24	; 0x07
    2d38:	98 87       	std	Y+8, r25	; 0x08
    2d3a:	a9 87       	std	Y+9, r26	; 0x09
    2d3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d40:	78 85       	ldd	r23, Y+8	; 0x08
    2d42:	89 85       	ldd	r24, Y+9	; 0x09
    2d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	40 e8       	ldi	r20, 0x80	; 128
    2d4c:	5f e3       	ldi	r21, 0x3F	; 63
    2d4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d52:	88 23       	and	r24, r24
    2d54:	2c f4       	brge	.+10     	; 0x2d60 <ISR+0xec>
		__ticks = 1;
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	9e 83       	std	Y+6, r25	; 0x06
    2d5c:	8d 83       	std	Y+5, r24	; 0x05
    2d5e:	3f c0       	rjmp	.+126    	; 0x2dde <ISR+0x16a>
	else if (__tmp > 65535)
    2d60:	6f 81       	ldd	r22, Y+7	; 0x07
    2d62:	78 85       	ldd	r23, Y+8	; 0x08
    2d64:	89 85       	ldd	r24, Y+9	; 0x09
    2d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	3f ef       	ldi	r19, 0xFF	; 255
    2d6c:	4f e7       	ldi	r20, 0x7F	; 127
    2d6e:	57 e4       	ldi	r21, 0x47	; 71
    2d70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d74:	18 16       	cp	r1, r24
    2d76:	4c f5       	brge	.+82     	; 0x2dca <ISR+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	40 e2       	ldi	r20, 0x20	; 32
    2d86:	51 e4       	ldi	r21, 0x41	; 65
    2d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	bc 01       	movw	r22, r24
    2d92:	cd 01       	movw	r24, r26
    2d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d98:	dc 01       	movw	r26, r24
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	9e 83       	std	Y+6, r25	; 0x06
    2d9e:	8d 83       	std	Y+5, r24	; 0x05
    2da0:	0f c0       	rjmp	.+30     	; 0x2dc0 <ISR+0x14c>
    2da2:	88 ec       	ldi	r24, 0xC8	; 200
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	9c 83       	std	Y+4, r25	; 0x04
    2da8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2daa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dac:	9c 81       	ldd	r25, Y+4	; 0x04
    2dae:	01 97       	sbiw	r24, 0x01	; 1
    2db0:	f1 f7       	brne	.-4      	; 0x2dae <ISR+0x13a>
    2db2:	9c 83       	std	Y+4, r25	; 0x04
    2db4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db6:	8d 81       	ldd	r24, Y+5	; 0x05
    2db8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dba:	01 97       	sbiw	r24, 0x01	; 1
    2dbc:	9e 83       	std	Y+6, r25	; 0x06
    2dbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc4:	00 97       	sbiw	r24, 0x00	; 0
    2dc6:	69 f7       	brne	.-38     	; 0x2da2 <ISR+0x12e>
    2dc8:	14 c0       	rjmp	.+40     	; 0x2df2 <ISR+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dca:	6f 81       	ldd	r22, Y+7	; 0x07
    2dcc:	78 85       	ldd	r23, Y+8	; 0x08
    2dce:	89 85       	ldd	r24, Y+9	; 0x09
    2dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	9e 83       	std	Y+6, r25	; 0x06
    2ddc:	8d 83       	std	Y+5, r24	; 0x05
    2dde:	8d 81       	ldd	r24, Y+5	; 0x05
    2de0:	9e 81       	ldd	r25, Y+6	; 0x06
    2de2:	9a 83       	std	Y+2, r25	; 0x02
    2de4:	89 83       	std	Y+1, r24	; 0x01
    2de6:	89 81       	ldd	r24, Y+1	; 0x01
    2de8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	f1 f7       	brne	.-4      	; 0x2dea <ISR+0x176>
    2dee:	9a 83       	std	Y+2, r25	; 0x02
    2df0:	89 83       	std	Y+1, r24	; 0x01

			_delay_ms(40);
			TCNT0 = 0x00;
    2df2:	e2 e5       	ldi	r30, 0x52	; 82
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	10 82       	st	Z, r1
			sensor_working=0;
    2df8:	10 92 80 00 	sts	0x0080, r1
			timer_counter=0;
    2dfc:	10 92 82 00 	sts	0x0082, r1
    2e00:	10 92 83 00 	sts	0x0083, r1
    2e04:	10 92 84 00 	sts	0x0084, r1
    2e08:	10 92 85 00 	sts	0x0085, r1
			rising_edge=0;
    2e0c:	10 92 81 00 	sts	0x0081, r1
		}
	}
}
    2e10:	62 96       	adiw	r28, 0x12	; 18
    2e12:	0f b6       	in	r0, 0x3f	; 63
    2e14:	f8 94       	cli
    2e16:	de bf       	out	0x3e, r29	; 62
    2e18:	0f be       	out	0x3f, r0	; 63
    2e1a:	cd bf       	out	0x3d, r28	; 61
    2e1c:	cf 91       	pop	r28
    2e1e:	df 91       	pop	r29
    2e20:	08 95       	ret

00002e22 <main>:
#include "Ultrasonic_interface.h"
#include "UART_interface.h"
#include "GIE_interface.h"

void main(void)
{
    2e22:	df 93       	push	r29
    2e24:	cf 93       	push	r28
    2e26:	cd b7       	in	r28, 0x3d	; 61
    2e28:	de b7       	in	r29, 0x3e	; 62
    2e2a:	6d 97       	sbiw	r28, 0x1d	; 29
    2e2c:	0f b6       	in	r0, 0x3f	; 63
    2e2e:	f8 94       	cli
    2e30:	de bf       	out	0x3e, r29	; 62
    2e32:	0f be       	out	0x3f, r0	; 63
    2e34:	cd bf       	out	0x3d, r28	; 61
	u8 itr;

	GIE_voidEnable();
    2e36:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <GIE_voidEnable>
	sei();
    2e3a:	78 94       	sei
	SVM_voidServoInit();
    2e3c:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <SVM_voidServoInit>
	Ultrasonic_voidInit();
    2e40:	0e 94 31 15 	call	0x2a62	; 0x2a62 <Ultrasonic_voidInit>

	while(1)
	{
		for(itr=10;itr<170;itr++)
    2e44:	8a e0       	ldi	r24, 0x0A	; 10
    2e46:	8d 8f       	std	Y+29, r24	; 0x1d
    2e48:	89 c0       	rjmp	.+274    	; 0x2f5c <main+0x13a>
		{
			SVM_voidSetAngle2(itr);				// Set Angle
    2e4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e4c:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <SVM_voidSetAngle2>
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	a0 ef       	ldi	r26, 0xF0	; 240
    2e56:	b1 e4       	ldi	r27, 0x41	; 65
    2e58:	89 8f       	std	Y+25, r24	; 0x19
    2e5a:	9a 8f       	std	Y+26, r25	; 0x1a
    2e5c:	ab 8f       	std	Y+27, r26	; 0x1b
    2e5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e60:	69 8d       	ldd	r22, Y+25	; 0x19
    2e62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	4a ef       	ldi	r20, 0xFA	; 250
    2e6e:	54 e4       	ldi	r21, 0x44	; 68
    2e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	8d 8b       	std	Y+21, r24	; 0x15
    2e7a:	9e 8b       	std	Y+22, r25	; 0x16
    2e7c:	af 8b       	std	Y+23, r26	; 0x17
    2e7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e80:	6d 89       	ldd	r22, Y+21	; 0x15
    2e82:	7e 89       	ldd	r23, Y+22	; 0x16
    2e84:	8f 89       	ldd	r24, Y+23	; 0x17
    2e86:	98 8d       	ldd	r25, Y+24	; 0x18
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	40 e8       	ldi	r20, 0x80	; 128
    2e8e:	5f e3       	ldi	r21, 0x3F	; 63
    2e90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e94:	88 23       	and	r24, r24
    2e96:	2c f4       	brge	.+10     	; 0x2ea2 <main+0x80>
		__ticks = 1;
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	9c 8b       	std	Y+20, r25	; 0x14
    2e9e:	8b 8b       	std	Y+19, r24	; 0x13
    2ea0:	3f c0       	rjmp	.+126    	; 0x2f20 <main+0xfe>
	else if (__tmp > 65535)
    2ea2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ea4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ea6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ea8:	98 8d       	ldd	r25, Y+24	; 0x18
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	3f ef       	ldi	r19, 0xFF	; 255
    2eae:	4f e7       	ldi	r20, 0x7F	; 127
    2eb0:	57 e4       	ldi	r21, 0x47	; 71
    2eb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eb6:	18 16       	cp	r1, r24
    2eb8:	4c f5       	brge	.+82     	; 0x2f0c <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eba:	69 8d       	ldd	r22, Y+25	; 0x19
    2ebc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ebe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ec0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	40 e2       	ldi	r20, 0x20	; 32
    2ec8:	51 e4       	ldi	r21, 0x41	; 65
    2eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	bc 01       	movw	r22, r24
    2ed4:	cd 01       	movw	r24, r26
    2ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	9c 8b       	std	Y+20, r25	; 0x14
    2ee0:	8b 8b       	std	Y+19, r24	; 0x13
    2ee2:	0f c0       	rjmp	.+30     	; 0x2f02 <main+0xe0>
    2ee4:	88 ec       	ldi	r24, 0xC8	; 200
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	9a 8b       	std	Y+18, r25	; 0x12
    2eea:	89 8b       	std	Y+17, r24	; 0x11
    2eec:	89 89       	ldd	r24, Y+17	; 0x11
    2eee:	9a 89       	ldd	r25, Y+18	; 0x12
    2ef0:	01 97       	sbiw	r24, 0x01	; 1
    2ef2:	f1 f7       	brne	.-4      	; 0x2ef0 <main+0xce>
    2ef4:	9a 8b       	std	Y+18, r25	; 0x12
    2ef6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef8:	8b 89       	ldd	r24, Y+19	; 0x13
    2efa:	9c 89       	ldd	r25, Y+20	; 0x14
    2efc:	01 97       	sbiw	r24, 0x01	; 1
    2efe:	9c 8b       	std	Y+20, r25	; 0x14
    2f00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f02:	8b 89       	ldd	r24, Y+19	; 0x13
    2f04:	9c 89       	ldd	r25, Y+20	; 0x14
    2f06:	00 97       	sbiw	r24, 0x00	; 0
    2f08:	69 f7       	brne	.-38     	; 0x2ee4 <main+0xc2>
    2f0a:	14 c0       	rjmp	.+40     	; 0x2f34 <main+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f10:	8f 89       	ldd	r24, Y+23	; 0x17
    2f12:	98 8d       	ldd	r25, Y+24	; 0x18
    2f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f18:	dc 01       	movw	r26, r24
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	9c 8b       	std	Y+20, r25	; 0x14
    2f1e:	8b 8b       	std	Y+19, r24	; 0x13
    2f20:	8b 89       	ldd	r24, Y+19	; 0x13
    2f22:	9c 89       	ldd	r25, Y+20	; 0x14
    2f24:	98 8b       	std	Y+16, r25	; 0x10
    2f26:	8f 87       	std	Y+15, r24	; 0x0f
    2f28:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f2a:	98 89       	ldd	r25, Y+16	; 0x10
    2f2c:	01 97       	sbiw	r24, 0x01	; 1
    2f2e:	f1 f7       	brne	.-4      	; 0x2f2c <main+0x10a>
    2f30:	98 8b       	std	Y+16, r25	; 0x10
    2f32:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(30);
			UART_voidSendDecimalNumber(itr);		// Send the Angle By Uart Protocol
    2f34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f36:	88 2f       	mov	r24, r24
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	a0 e0       	ldi	r26, 0x00	; 0
    2f3c:	b0 e0       	ldi	r27, 0x00	; 0
    2f3e:	bc 01       	movw	r22, r24
    2f40:	cd 01       	movw	r24, r26
    2f42:	0e 94 a0 13 	call	0x2740	; 0x2740 <UART_voidSendDecimalNumber>
			USART_voidSend(',');
    2f46:	8c e2       	ldi	r24, 0x2C	; 44
    2f48:	0e 94 68 11 	call	0x22d0	; 0x22d0 <USART_voidSend>
			Ultra_voidTriger();					// Send the Distance By Uart Protocol
    2f4c:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <Ultra_voidTriger>
			USART_voidSend('.');
    2f50:	8e e2       	ldi	r24, 0x2E	; 46
    2f52:	0e 94 68 11 	call	0x22d0	; 0x22d0 <USART_voidSend>
	SVM_voidServoInit();
	Ultrasonic_voidInit();

	while(1)
	{
		for(itr=10;itr<170;itr++)
    2f56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f58:	8f 5f       	subi	r24, 0xFF	; 255
    2f5a:	8d 8f       	std	Y+29, r24	; 0x1d
    2f5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f5e:	8a 3a       	cpi	r24, 0xAA	; 170
    2f60:	08 f4       	brcc	.+2      	; 0x2f64 <main+0x142>
    2f62:	73 cf       	rjmp	.-282    	; 0x2e4a <main+0x28>
			USART_voidSend(',');
			Ultra_voidTriger();					// Send the Distance By Uart Protocol
			USART_voidSend('.');
		}

		for(itr=170;itr>10;itr--)
    2f64:	8a ea       	ldi	r24, 0xAA	; 170
    2f66:	8d 8f       	std	Y+29, r24	; 0x1d
    2f68:	89 c0       	rjmp	.+274    	; 0x307c <main+0x25a>
		{
			SVM_voidSetAngle2(itr);				// Set Angle
    2f6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f6c:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <SVM_voidSetAngle2>
    2f70:	80 e0       	ldi	r24, 0x00	; 0
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	a0 ef       	ldi	r26, 0xF0	; 240
    2f76:	b1 e4       	ldi	r27, 0x41	; 65
    2f78:	8b 87       	std	Y+11, r24	; 0x0b
    2f7a:	9c 87       	std	Y+12, r25	; 0x0c
    2f7c:	ad 87       	std	Y+13, r26	; 0x0d
    2f7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f80:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f82:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f84:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f86:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	4a ef       	ldi	r20, 0xFA	; 250
    2f8e:	54 e4       	ldi	r21, 0x44	; 68
    2f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	8f 83       	std	Y+7, r24	; 0x07
    2f9a:	98 87       	std	Y+8, r25	; 0x08
    2f9c:	a9 87       	std	Y+9, r26	; 0x09
    2f9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fa0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa2:	78 85       	ldd	r23, Y+8	; 0x08
    2fa4:	89 85       	ldd	r24, Y+9	; 0x09
    2fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa8:	20 e0       	ldi	r18, 0x00	; 0
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	40 e8       	ldi	r20, 0x80	; 128
    2fae:	5f e3       	ldi	r21, 0x3F	; 63
    2fb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fb4:	88 23       	and	r24, r24
    2fb6:	2c f4       	brge	.+10     	; 0x2fc2 <main+0x1a0>
		__ticks = 1;
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	9e 83       	std	Y+6, r25	; 0x06
    2fbe:	8d 83       	std	Y+5, r24	; 0x05
    2fc0:	3f c0       	rjmp	.+126    	; 0x3040 <main+0x21e>
	else if (__tmp > 65535)
    2fc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc4:	78 85       	ldd	r23, Y+8	; 0x08
    2fc6:	89 85       	ldd	r24, Y+9	; 0x09
    2fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	3f ef       	ldi	r19, 0xFF	; 255
    2fce:	4f e7       	ldi	r20, 0x7F	; 127
    2fd0:	57 e4       	ldi	r21, 0x47	; 71
    2fd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fd6:	18 16       	cp	r1, r24
    2fd8:	4c f5       	brge	.+82     	; 0x302c <main+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fda:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fde:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fe0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	40 e2       	ldi	r20, 0x20	; 32
    2fe8:	51 e4       	ldi	r21, 0x41	; 65
    2fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	bc 01       	movw	r22, r24
    2ff4:	cd 01       	movw	r24, r26
    2ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	9e 83       	std	Y+6, r25	; 0x06
    3000:	8d 83       	std	Y+5, r24	; 0x05
    3002:	0f c0       	rjmp	.+30     	; 0x3022 <main+0x200>
    3004:	88 ec       	ldi	r24, 0xC8	; 200
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	9c 83       	std	Y+4, r25	; 0x04
    300a:	8b 83       	std	Y+3, r24	; 0x03
    300c:	8b 81       	ldd	r24, Y+3	; 0x03
    300e:	9c 81       	ldd	r25, Y+4	; 0x04
    3010:	01 97       	sbiw	r24, 0x01	; 1
    3012:	f1 f7       	brne	.-4      	; 0x3010 <main+0x1ee>
    3014:	9c 83       	std	Y+4, r25	; 0x04
    3016:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3018:	8d 81       	ldd	r24, Y+5	; 0x05
    301a:	9e 81       	ldd	r25, Y+6	; 0x06
    301c:	01 97       	sbiw	r24, 0x01	; 1
    301e:	9e 83       	std	Y+6, r25	; 0x06
    3020:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3022:	8d 81       	ldd	r24, Y+5	; 0x05
    3024:	9e 81       	ldd	r25, Y+6	; 0x06
    3026:	00 97       	sbiw	r24, 0x00	; 0
    3028:	69 f7       	brne	.-38     	; 0x3004 <main+0x1e2>
    302a:	14 c0       	rjmp	.+40     	; 0x3054 <main+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    302c:	6f 81       	ldd	r22, Y+7	; 0x07
    302e:	78 85       	ldd	r23, Y+8	; 0x08
    3030:	89 85       	ldd	r24, Y+9	; 0x09
    3032:	9a 85       	ldd	r25, Y+10	; 0x0a
    3034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3038:	dc 01       	movw	r26, r24
    303a:	cb 01       	movw	r24, r22
    303c:	9e 83       	std	Y+6, r25	; 0x06
    303e:	8d 83       	std	Y+5, r24	; 0x05
    3040:	8d 81       	ldd	r24, Y+5	; 0x05
    3042:	9e 81       	ldd	r25, Y+6	; 0x06
    3044:	9a 83       	std	Y+2, r25	; 0x02
    3046:	89 83       	std	Y+1, r24	; 0x01
    3048:	89 81       	ldd	r24, Y+1	; 0x01
    304a:	9a 81       	ldd	r25, Y+2	; 0x02
    304c:	01 97       	sbiw	r24, 0x01	; 1
    304e:	f1 f7       	brne	.-4      	; 0x304c <main+0x22a>
    3050:	9a 83       	std	Y+2, r25	; 0x02
    3052:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(30);
			UART_voidSendDecimalNumber(itr);		// Send the Angle By Uart Protocol
    3054:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3056:	88 2f       	mov	r24, r24
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	a0 e0       	ldi	r26, 0x00	; 0
    305c:	b0 e0       	ldi	r27, 0x00	; 0
    305e:	bc 01       	movw	r22, r24
    3060:	cd 01       	movw	r24, r26
    3062:	0e 94 a0 13 	call	0x2740	; 0x2740 <UART_voidSendDecimalNumber>
			USART_voidSend(',');
    3066:	8c e2       	ldi	r24, 0x2C	; 44
    3068:	0e 94 68 11 	call	0x22d0	; 0x22d0 <USART_voidSend>
			Ultra_voidTriger();		          	// Send the Distance By Uart Protocol
    306c:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <Ultra_voidTriger>
			USART_voidSend('.');
    3070:	8e e2       	ldi	r24, 0x2E	; 46
    3072:	0e 94 68 11 	call	0x22d0	; 0x22d0 <USART_voidSend>
			USART_voidSend(',');
			Ultra_voidTriger();					// Send the Distance By Uart Protocol
			USART_voidSend('.');
		}

		for(itr=170;itr>10;itr--)
    3076:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3078:	81 50       	subi	r24, 0x01	; 1
    307a:	8d 8f       	std	Y+29, r24	; 0x1d
    307c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    307e:	8b 30       	cpi	r24, 0x0B	; 11
    3080:	08 f0       	brcs	.+2      	; 0x3084 <main+0x262>
    3082:	73 cf       	rjmp	.-282    	; 0x2f6a <main+0x148>
    3084:	df ce       	rjmp	.-578    	; 0x2e44 <main+0x22>

00003086 <__mulsi3>:
    3086:	62 9f       	mul	r22, r18
    3088:	d0 01       	movw	r26, r0
    308a:	73 9f       	mul	r23, r19
    308c:	f0 01       	movw	r30, r0
    308e:	82 9f       	mul	r24, r18
    3090:	e0 0d       	add	r30, r0
    3092:	f1 1d       	adc	r31, r1
    3094:	64 9f       	mul	r22, r20
    3096:	e0 0d       	add	r30, r0
    3098:	f1 1d       	adc	r31, r1
    309a:	92 9f       	mul	r25, r18
    309c:	f0 0d       	add	r31, r0
    309e:	83 9f       	mul	r24, r19
    30a0:	f0 0d       	add	r31, r0
    30a2:	74 9f       	mul	r23, r20
    30a4:	f0 0d       	add	r31, r0
    30a6:	65 9f       	mul	r22, r21
    30a8:	f0 0d       	add	r31, r0
    30aa:	99 27       	eor	r25, r25
    30ac:	72 9f       	mul	r23, r18
    30ae:	b0 0d       	add	r27, r0
    30b0:	e1 1d       	adc	r30, r1
    30b2:	f9 1f       	adc	r31, r25
    30b4:	63 9f       	mul	r22, r19
    30b6:	b0 0d       	add	r27, r0
    30b8:	e1 1d       	adc	r30, r1
    30ba:	f9 1f       	adc	r31, r25
    30bc:	bd 01       	movw	r22, r26
    30be:	cf 01       	movw	r24, r30
    30c0:	11 24       	eor	r1, r1
    30c2:	08 95       	ret

000030c4 <__udivmodsi4>:
    30c4:	a1 e2       	ldi	r26, 0x21	; 33
    30c6:	1a 2e       	mov	r1, r26
    30c8:	aa 1b       	sub	r26, r26
    30ca:	bb 1b       	sub	r27, r27
    30cc:	fd 01       	movw	r30, r26
    30ce:	0d c0       	rjmp	.+26     	; 0x30ea <__udivmodsi4_ep>

000030d0 <__udivmodsi4_loop>:
    30d0:	aa 1f       	adc	r26, r26
    30d2:	bb 1f       	adc	r27, r27
    30d4:	ee 1f       	adc	r30, r30
    30d6:	ff 1f       	adc	r31, r31
    30d8:	a2 17       	cp	r26, r18
    30da:	b3 07       	cpc	r27, r19
    30dc:	e4 07       	cpc	r30, r20
    30de:	f5 07       	cpc	r31, r21
    30e0:	20 f0       	brcs	.+8      	; 0x30ea <__udivmodsi4_ep>
    30e2:	a2 1b       	sub	r26, r18
    30e4:	b3 0b       	sbc	r27, r19
    30e6:	e4 0b       	sbc	r30, r20
    30e8:	f5 0b       	sbc	r31, r21

000030ea <__udivmodsi4_ep>:
    30ea:	66 1f       	adc	r22, r22
    30ec:	77 1f       	adc	r23, r23
    30ee:	88 1f       	adc	r24, r24
    30f0:	99 1f       	adc	r25, r25
    30f2:	1a 94       	dec	r1
    30f4:	69 f7       	brne	.-38     	; 0x30d0 <__udivmodsi4_loop>
    30f6:	60 95       	com	r22
    30f8:	70 95       	com	r23
    30fa:	80 95       	com	r24
    30fc:	90 95       	com	r25
    30fe:	9b 01       	movw	r18, r22
    3100:	ac 01       	movw	r20, r24
    3102:	bd 01       	movw	r22, r26
    3104:	cf 01       	movw	r24, r30
    3106:	08 95       	ret

00003108 <__divmodsi4>:
    3108:	97 fb       	bst	r25, 7
    310a:	09 2e       	mov	r0, r25
    310c:	05 26       	eor	r0, r21
    310e:	0e d0       	rcall	.+28     	; 0x312c <__divmodsi4_neg1>
    3110:	57 fd       	sbrc	r21, 7
    3112:	04 d0       	rcall	.+8      	; 0x311c <__divmodsi4_neg2>
    3114:	d7 df       	rcall	.-82     	; 0x30c4 <__udivmodsi4>
    3116:	0a d0       	rcall	.+20     	; 0x312c <__divmodsi4_neg1>
    3118:	00 1c       	adc	r0, r0
    311a:	38 f4       	brcc	.+14     	; 0x312a <__divmodsi4_exit>

0000311c <__divmodsi4_neg2>:
    311c:	50 95       	com	r21
    311e:	40 95       	com	r20
    3120:	30 95       	com	r19
    3122:	21 95       	neg	r18
    3124:	3f 4f       	sbci	r19, 0xFF	; 255
    3126:	4f 4f       	sbci	r20, 0xFF	; 255
    3128:	5f 4f       	sbci	r21, 0xFF	; 255

0000312a <__divmodsi4_exit>:
    312a:	08 95       	ret

0000312c <__divmodsi4_neg1>:
    312c:	f6 f7       	brtc	.-4      	; 0x312a <__divmodsi4_exit>
    312e:	90 95       	com	r25
    3130:	80 95       	com	r24
    3132:	70 95       	com	r23
    3134:	61 95       	neg	r22
    3136:	7f 4f       	sbci	r23, 0xFF	; 255
    3138:	8f 4f       	sbci	r24, 0xFF	; 255
    313a:	9f 4f       	sbci	r25, 0xFF	; 255
    313c:	08 95       	ret

0000313e <__prologue_saves__>:
    313e:	2f 92       	push	r2
    3140:	3f 92       	push	r3
    3142:	4f 92       	push	r4
    3144:	5f 92       	push	r5
    3146:	6f 92       	push	r6
    3148:	7f 92       	push	r7
    314a:	8f 92       	push	r8
    314c:	9f 92       	push	r9
    314e:	af 92       	push	r10
    3150:	bf 92       	push	r11
    3152:	cf 92       	push	r12
    3154:	df 92       	push	r13
    3156:	ef 92       	push	r14
    3158:	ff 92       	push	r15
    315a:	0f 93       	push	r16
    315c:	1f 93       	push	r17
    315e:	cf 93       	push	r28
    3160:	df 93       	push	r29
    3162:	cd b7       	in	r28, 0x3d	; 61
    3164:	de b7       	in	r29, 0x3e	; 62
    3166:	ca 1b       	sub	r28, r26
    3168:	db 0b       	sbc	r29, r27
    316a:	0f b6       	in	r0, 0x3f	; 63
    316c:	f8 94       	cli
    316e:	de bf       	out	0x3e, r29	; 62
    3170:	0f be       	out	0x3f, r0	; 63
    3172:	cd bf       	out	0x3d, r28	; 61
    3174:	09 94       	ijmp

00003176 <__epilogue_restores__>:
    3176:	2a 88       	ldd	r2, Y+18	; 0x12
    3178:	39 88       	ldd	r3, Y+17	; 0x11
    317a:	48 88       	ldd	r4, Y+16	; 0x10
    317c:	5f 84       	ldd	r5, Y+15	; 0x0f
    317e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3180:	7d 84       	ldd	r7, Y+13	; 0x0d
    3182:	8c 84       	ldd	r8, Y+12	; 0x0c
    3184:	9b 84       	ldd	r9, Y+11	; 0x0b
    3186:	aa 84       	ldd	r10, Y+10	; 0x0a
    3188:	b9 84       	ldd	r11, Y+9	; 0x09
    318a:	c8 84       	ldd	r12, Y+8	; 0x08
    318c:	df 80       	ldd	r13, Y+7	; 0x07
    318e:	ee 80       	ldd	r14, Y+6	; 0x06
    3190:	fd 80       	ldd	r15, Y+5	; 0x05
    3192:	0c 81       	ldd	r16, Y+4	; 0x04
    3194:	1b 81       	ldd	r17, Y+3	; 0x03
    3196:	aa 81       	ldd	r26, Y+2	; 0x02
    3198:	b9 81       	ldd	r27, Y+1	; 0x01
    319a:	ce 0f       	add	r28, r30
    319c:	d1 1d       	adc	r29, r1
    319e:	0f b6       	in	r0, 0x3f	; 63
    31a0:	f8 94       	cli
    31a2:	de bf       	out	0x3e, r29	; 62
    31a4:	0f be       	out	0x3f, r0	; 63
    31a6:	cd bf       	out	0x3d, r28	; 61
    31a8:	ed 01       	movw	r28, r26
    31aa:	08 95       	ret

000031ac <_exit>:
    31ac:	f8 94       	cli

000031ae <__stop_program>:
    31ae:	ff cf       	rjmp	.-2      	; 0x31ae <__stop_program>
